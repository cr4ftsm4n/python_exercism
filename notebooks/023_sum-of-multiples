{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sum Of Multiples\n",
    "\n",
    "Given a number, find the sum of all the unique multiples of particular numbers up to\n",
    "but not including that number.\n",
    "\n",
    "If we list all the natural numbers below 20 that are multiples of 3 or 5,\n",
    "we get 3, 5, 6, 9, 10, 12, 15, and 18.\n",
    "\n",
    "The sum of these multiples is 78.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test sum_of_multiples_test.py`\n",
    "- Python 3.3+: `pytest sum_of_multiples_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest sum_of_multiples_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/sum-of-multiples` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "A variation on Problem 1 at Project Euler [http://projecteuler.net/problem=1](http://projecteuler.net/problem=1)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_of_multiples(limit, multiples):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "You can make the following assumptions about the inputs to the\n",
    "'sum_of_multiples' function:\n",
    "    * All input numbers are non-negative 'int's, i.e. natural numbers\n",
    "      including zero.\n",
    "    * A list of factors must be given, and its elements are unique\n",
    "      and sorted in ascending order.\n",
    "\"\"\"\n",
    "\n",
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0\n",
    "\n",
    "class SumOfMultiplesTest(unittest.TestCase):\n",
    "    def test_multiples_of_3_or_5_up_to_1(self):\n",
    "        self.assertEqual(sum_of_multiples(1, [3, 5]), 0)\n",
    "\n",
    "    def test_multiples_of_3_or_5_up_to_4(self):\n",
    "        self.assertEqual(sum_of_multiples(4, [3, 5]), 3)\n",
    "\n",
    "    def test_multiples_of_3_up_to_7(self):\n",
    "        self.assertEqual(sum_of_multiples(7, [3]), 9)\n",
    "\n",
    "    def test_multiples_of_3_or_5_up_to_10(self):\n",
    "        self.assertEqual(sum_of_multiples(10, [3, 5]), 23)\n",
    "\n",
    "    def test_multiples_of_3_or_5_up_to_100(self):\n",
    "        self.assertEqual(sum_of_multiples(100, [3, 5]), 2318)\n",
    "\n",
    "    def test_multiples_of_3_or_5_up_to_1000(self):\n",
    "        self.assertEqual(sum_of_multiples(1000, [3, 5]), 233168)\n",
    "\n",
    "    def test_multiples_of_7_13_or_17_up_to_20(self):\n",
    "        self.assertEqual(sum_of_multiples(20, [7, 13, 17]), 51)\n",
    "\n",
    "    def test_multiples_of_4_or_6_up_to_15(self):\n",
    "        self.assertEqual(sum_of_multiples(15, [4, 6]), 30)\n",
    "\n",
    "    def test_multiples_of_5_6_or_8_up_to_150(self):\n",
    "        self.assertEqual(sum_of_multiples(150, [5, 6, 8]), 4419)\n",
    "\n",
    "    def test_multiples_of_5_or_25_up_to_51(self):\n",
    "        self.assertEqual(sum_of_multiples(51, [5, 25]), 275)\n",
    "\n",
    "    def test_multiples_of_43_or_47_up_to_10000(self):\n",
    "        self.assertEqual(sum_of_multiples(10000, [43, 47]), 2203160)\n",
    "\n",
    "    def test_multiples_of_1_up_to_100(self):\n",
    "        self.assertEqual(sum_of_multiples(100, [1]), 4950)\n",
    "\n",
    "    def test_multiples_of_an_empty_list_up_to_10000(self):\n",
    "        self.assertEqual(sum_of_multiples(10000, []), 0)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
