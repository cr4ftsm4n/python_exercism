{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Poker\n",
    "\n",
    "Pick the best hand(s) from a list of poker hands.\n",
    "\n",
    "See [wikipedia](https://en.wikipedia.org/wiki/List_of_poker_hands) for an\n",
    "overview of poker hands.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test poker_test.py`\n",
    "- Python 3.3+: `pytest poker_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest poker_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/poker` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Inspired by the training course from Udacity. [https://www.udacity.com/course/viewer#!/c-cs212/](https://www.udacity.com/course/viewer#!/c-cs212/)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def best_hands(hands):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0\n",
    "\n",
    "class PokerTest(unittest.TestCase):\n",
    "    def test_single_hand_always_wins(self):\n",
    "        hands = [\"4S 5S 7H 8D JC\"]\n",
    "        expected = [\"4S 5S 7H 8D JC\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_highest_card_out_of_all_hands_wins(self):\n",
    "        hands = [\n",
    "            \"4D 5S 6S 8D 3C\",\n",
    "            \"2S 4C 7S 9H 10H\",\n",
    "            \"3S 4S 5D 6H JH\",\n",
    "        ]\n",
    "        expected = [\"3S 4S 5D 6H JH\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_tie_has_multiple_winners(self):\n",
    "        hands = [\n",
    "            \"4D 5S 6S 8D 3C\",\n",
    "            \"2S 4C 7S 9H 10H\",\n",
    "            \"3S 4S 5D 6H JH\",\n",
    "            \"3H 4H 5C 6C JD\",\n",
    "        ]\n",
    "        expected = [\n",
    "            \"3S 4S 5D 6H JH\",\n",
    "            \"3H 4H 5C 6C JD\",\n",
    "        ]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_tie_compares_multiple(self):\n",
    "        hands = [\n",
    "            \"3S 5H 6S 8D 7H\",\n",
    "            \"2S 5D 6D 8C 7S\",\n",
    "        ]\n",
    "        expected = [\"3S 5H 6S 8D 7H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_one_pair_beats_high_card(self):\n",
    "        hands = [\n",
    "            \"4S 5H 6C 8D KH\",\n",
    "            \"2S 4H 6S 4D JH\",\n",
    "        ]\n",
    "        expected = [\"2S 4H 6S 4D JH\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_highest_pair_wins(self):\n",
    "        hands = [\n",
    "            \"4S 2H 6S 2D JH\",\n",
    "            \"2S 4H 6C 4D JD\",\n",
    "        ]\n",
    "        expected = [\"2S 4H 6C 4D JD\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_pairs_beats_one_pair(self):\n",
    "        hands = [\n",
    "            \"2S 8H 6S 8D JH\",\n",
    "            \"4S 5H 4C 8C 5C\",\n",
    "        ]\n",
    "        expected = [\"4S 5H 4C 8C 5C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_double_pair(self):\n",
    "        hands = [\n",
    "            \"2S 8H 2D 8D 3H\",\n",
    "            \"4S 5H 4C 8S 5D\",\n",
    "        ]\n",
    "        expected = [\"2S 8H 2D 8D 3H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_double_pair_higher_tie(self):\n",
    "        hands = [\n",
    "            \"2S QS 2C QD JH\",\n",
    "            \"JD QH JS 8D QC\",\n",
    "        ]\n",
    "        expected = [\"JD QH JS 8D QC\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_double_pair_tie_kicker(self):\n",
    "        hands = [\n",
    "            \"JD QH JS 8D QC\",\n",
    "            \"JS QS JC 2D QD\",\n",
    "        ]\n",
    "        expected = [\"JD QH JS 8D QC\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_three_of_a_kind_beats_two_pair(self):\n",
    "        hands = [\n",
    "            \"2S 8H 2H 8D JH\",\n",
    "            \"4S 5H 4C 8S 4H\",\n",
    "        ]\n",
    "        expected = [\"4S 5H 4C 8S 4H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_triple_pair(self):\n",
    "        hands = [\n",
    "            \"2S 2H 2C 8D JH\",\n",
    "            \"4S AH AS 8C AD\",\n",
    "        ]\n",
    "        expected = [\"4S AH AS 8C AD\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_three_multiple_decks(self):\n",
    "        hands = [\n",
    "            \"4S AH AS 7C AD\",\n",
    "            \"4S AH AS 8C AD\",\n",
    "        ]\n",
    "        expected = [\"4S AH AS 8C AD\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_three_vs_straight(self):\n",
    "        hands = [\n",
    "            \"4S 5H 4C 8D 4H\",\n",
    "            \"3S 4D 2S 6D 5C\",\n",
    "        ]\n",
    "        expected = [\"3S 4D 2S 6D 5C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_aces_can_end_straight(self):\n",
    "        hands = [\n",
    "            \"4S 5H 4C 8D 4H\",\n",
    "            \"10D JH QS KD AC\",\n",
    "        ]\n",
    "        expected = [\"10D JH QS KD AC\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_aces_can_start_straight(self):\n",
    "        hands = [\n",
    "            \"4S 5H 4C 8D 4H\",\n",
    "            \"4D AH 3S 2D 5C\",\n",
    "        ]\n",
    "        expected = [\"4D AH 3S 2D 5C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_straights(self):\n",
    "        hands = [\n",
    "            \"4S 6C 7S 8D 5H\",\n",
    "            \"5S 7H 8S 9D 6H\",\n",
    "        ]\n",
    "        expected = [\"5S 7H 8S 9D 6H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_lowest_straight(self):\n",
    "        hands = [\n",
    "            \"2H 3C 4D 5D 6H\",\n",
    "            \"4S AH 3S 2D 5H\",\n",
    "        ]\n",
    "        expected = [\"2H 3C 4D 5D 6H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_straight_vs_flush(self):\n",
    "        hands = [\n",
    "            \"4C 6H 7D 8D 5H\",\n",
    "            \"2S 4S 5S 6S 7S\",\n",
    "        ]\n",
    "        expected = [\"2S 4S 5S 6S 7S\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_flushes(self):\n",
    "        hands = [\n",
    "            \"4H 7H 8H 9H 6H\",\n",
    "            \"2S 4S 5S 6S 7S\",\n",
    "        ]\n",
    "        expected = [\"4H 7H 8H 9H 6H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_flush_vs_full(self):\n",
    "        hands = [\n",
    "            \"3H 6H 7H 8H 5H\",\n",
    "            \"4S 5H 4C 5D 4H\",\n",
    "        ]\n",
    "        expected = [\"4S 5H 4C 5D 4H\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_fulls(self):\n",
    "        hands = [\n",
    "            \"4H 4S 4D 9S 9D\",\n",
    "            \"5H 5S 5D 8S 8D\",\n",
    "        ]\n",
    "        expected = [\"5H 5S 5D 8S 8D\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_fulls_same_triplet(self):\n",
    "        hands = [\n",
    "            \"5H 5S 5D 9S 9D\",\n",
    "            \"5H 5S 5D 8S 8D\",\n",
    "        ]\n",
    "        expected = [\"5H 5S 5D 9S 9D\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_full_vs_four(self):\n",
    "        hands = [\n",
    "            \"4S 5H 4D 5D 4H\",\n",
    "            \"3S 3H 2S 3D 3C\",\n",
    "        ]\n",
    "        expected = [\"3S 3H 2S 3D 3C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_fours(self):\n",
    "        hands = [\n",
    "            \"2S 2H 2C 8D 2D\",\n",
    "            \"4S 5H 5S 5D 5C\",\n",
    "        ]\n",
    "        expected = [\"4S 5H 5S 5D 5C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_fours_kicker(self):\n",
    "        hands = [\n",
    "            \"3S 3H 2S 3D 3C\",\n",
    "            \"3S 3H 4S 3D 3C\",\n",
    "        ]\n",
    "        expected = [\"3S 3H 4S 3D 3C\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_four_vs_straight_flush(self):\n",
    "        hands = [\n",
    "            \"4S 5H 5S 5D 5C\",\n",
    "            \"7S 8S 9S 6S 10S\",\n",
    "        ]\n",
    "        expected = [\"7S 8S 9S 6S 10S\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "    def test_two_straight_flushes(self):\n",
    "        hands = [\n",
    "            \"4H 6H 7H 8H 5H\",\n",
    "            \"5S 7S 8S 9S 6S\",\n",
    "        ]\n",
    "        expected = [\"5S 7S 8S 9S 6S\"]\n",
    "        self.assertEqual(best_hands(hands), expected)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
