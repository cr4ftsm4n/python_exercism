{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Cipher\n",
    "\n",
    "Implement a simple shift cipher like Caesar and a more secure substitution cipher.\n",
    "\n",
    "## Step 1\n",
    "\n",
    "\"If he had anything confidential to say, he wrote it in cipher, that is,\n",
    "by so changing the order of the letters of the alphabet, that not a word\n",
    "could be made out. If anyone wishes to decipher these, and get at their\n",
    "meaning, he must substitute the fourth letter of the alphabet, namely D,\n",
    "for A, and so with the others.\"\n",
    "â€”Suetonius, Life of Julius Caesar\n",
    "\n",
    "Ciphers are very straight-forward algorithms that allow us to render\n",
    "text less readable while still allowing easy deciphering. They are\n",
    "vulnerable to many forms of cryptoanalysis, but we are lucky that\n",
    "generally our little sisters are not cryptoanalysts.\n",
    "\n",
    "The Caesar Cipher was used for some messages from Julius Caesar that\n",
    "were sent afield. Now Caesar knew that the cipher wasn't very good, but\n",
    "he had one ally in that respect: almost nobody could read well. So even\n",
    "being a couple letters off was sufficient so that people couldn't\n",
    "recognize the few words that they did know.\n",
    "\n",
    "Your task is to create a simple shift cipher like the Caesar Cipher.\n",
    "This image is a great example of the Caesar Cipher:\n",
    "\n",
    "![Caesar Cipher][1]\n",
    "\n",
    "For example:\n",
    "\n",
    "Giving \"iamapandabear\" as input to the encode function returns the cipher \"ldpdsdqgdehdu\". Obscure enough to keep our message secret in transit.\n",
    "\n",
    "When \"ldpdsdqgdehdu\" is put into the decode function it would return\n",
    "the original \"iamapandabear\" letting your friend read your original\n",
    "message.\n",
    "\n",
    "## Step 2\n",
    "\n",
    "Shift ciphers are no fun though when your kid sister figures it out. Try\n",
    "amending the code to allow us to specify a key and use that for the\n",
    "shift distance. This is called a substitution cipher.\n",
    "\n",
    "Here's an example:\n",
    "\n",
    "Given the key \"aaaaaaaaaaaaaaaaaa\", encoding the string \"iamapandabear\"\n",
    "would return the original \"iamapandabear\".\n",
    "\n",
    "Given the key \"ddddddddddddddddd\", encoding our string \"iamapandabear\"\n",
    "would return the obscured \"ldpdsdqgdehdu\"\n",
    "\n",
    "In the example above, we've set a = 0 for the key value. So when the\n",
    "plaintext is added to the key, we end up with the same message coming\n",
    "out. So \"aaaa\" is not an ideal key. But if we set the key to \"dddd\", we\n",
    "would get the same thing as the Caesar Cipher.\n",
    "\n",
    "## Step 3\n",
    "\n",
    "The weakest link in any cipher is the human being. Let's make your\n",
    "substitution cipher a little more fault tolerant by providing a source\n",
    "of randomness and ensuring that the key contains only lowercase letters.\n",
    "\n",
    "If someone doesn't submit a key at all, generate a truly random key of\n",
    "at least 100 characters in length.\n",
    "\n",
    "If the key submitted is not composed only of lowercase letters, your\n",
    "solution should handle the error in a language-appropriate way.\n",
    "\n",
    "## Extensions\n",
    "\n",
    "Shift ciphers work by making the text slightly odd, but are vulnerable\n",
    "to frequency analysis. Substitution ciphers help that, but are still\n",
    "very vulnerable when the key is short or if spaces are preserved. Later\n",
    "on you'll see one solution to this problem in the exercise\n",
    "\"crypto-square\".\n",
    "\n",
    "If you want to go farther in this field, the questions begin to be about\n",
    "how we can exchange keys in a secure way. Take a look at [Diffie-Hellman\n",
    "on Wikipedia][dh] for one of the first implementations of this scheme.\n",
    "\n",
    "[1]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Caesar_cipher_left_shift_of_3.svg/320px-Caesar_cipher_left_shift_of_3.svg.png\n",
    "[dh]: http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\n",
    "\n",
    "## Should I use random or secrets?\n",
    "\n",
    "Python, as of version 3.6, includes two different random modules.\n",
    "\n",
    "The module called `random` is pseudo-random, meaning it does not generate\n",
    "true randomness, but follows an algorithm that simulates randomness.\n",
    "Since random numbers are generated through a known algorithm, they are not truly random.\n",
    "\n",
    "The `random` module is not correctly suited for cryptography and should not be used,\n",
    "precisely because it is pseudo-random.\n",
    "\n",
    "For this reason, in version 3.6, Python introduced the `secrets` module, which generates\n",
    "cryptographically strong random numbers that provide the greater security required for cryptography.\n",
    "\n",
    "Since this is only an exercise, `random` is fine to use, but note that **it would be\n",
    "very insecure if actually used for cryptography.**\n",
    "\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test simple_cipher_test.py`\n",
    "- Python 3.3+: `pytest simple_cipher_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest simple_cipher_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/simple-cipher` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Substitution Cipher at Wikipedia [http://en.wikipedia.org/wiki/Substitution_cipher](http://en.wikipedia.org/wiki/Substitution_cipher)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cipher(object):\n",
    "    def __init__(self, key=None):\n",
    "        pass\n",
    "\n",
    "    def encode(self, text):\n",
    "        pass\n",
    "\n",
    "    def decode(self, text):\n",
    "        pass\n",
    "\n",
    "\n",
    "class Caesar(object):\n",
    "    def __init__(self):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "class CipherTest(unittest.TestCase):\n",
    "    def test_caesar_encode1(self):\n",
    "        self.assertEqual(Caesar().encode('itisawesomeprogramminginpython'),\n",
    "                         'lwlvdzhvrphsurjudpplqjlqsbwkrq')\n",
    "\n",
    "    def test_caesar_encode2(self):\n",
    "        self.assertEqual(Caesar().encode('venividivici'), 'yhqlylglylfl')\n",
    "\n",
    "    def test_caesar_encode3(self):\n",
    "        self.assertEqual(Caesar().encode('\\'Twas the night before Christmas'),\n",
    "                         'wzdvwkhqljkwehiruhfkulvwpdv')\n",
    "\n",
    "    def test_caesar_encode_with_numbers(self):\n",
    "        self.assertEqual(Caesar().encode('1, 2, 3, Go!'), 'jr')\n",
    "\n",
    "    def test_caesar_decode(self):\n",
    "        self.assertEqual(Caesar().decode('yhqlylglylfl'), 'venividivici')\n",
    "\n",
    "    def test_cipher_encode1(self):\n",
    "        c = Cipher('a')\n",
    "        self.assertEqual(\n",
    "            c.encode('itisawesomeprogramminginpython'),\n",
    "            'itisawesomeprogramminginpython')\n",
    "\n",
    "    def test_cipher_encode2(self):\n",
    "        c = Cipher('aaaaaaaaaaaaaaaaaaaaaa')\n",
    "        self.assertEqual(\n",
    "            c.encode('itisawesomeprogramminginpython'),\n",
    "            'itisawesomeprogramminginpython')\n",
    "\n",
    "    def test_cipher_encode3(self):\n",
    "        c = Cipher('dddddddddddddddddddddd')\n",
    "        self.assertEqual(c.encode('venividivici'), 'yhqlylglylfl')\n",
    "\n",
    "    def test_cipher_encode4(self):\n",
    "        key = ('duxrceqyaimciuucnelkeoxjhdyduucpmrxmaivacmybmsdrzwqxvbxsy'\n",
    "               'gzsabdjmdjabeorttiwinfrpmpogvabiofqexnohrqu')\n",
    "        c = Cipher(key)\n",
    "        self.assertEqual(c.encode('diffiehellman'), 'gccwkixcltycv')\n",
    "\n",
    "    def test_cipher_encode_short_key(self):\n",
    "        c = Cipher('abcd')\n",
    "        self.assertEqual(c.encode('aaaaaaaa'), 'abcdabcd')\n",
    "\n",
    "    def test_cipher_compositiion1(self):\n",
    "        key = ('duxrceqyaimciuucnelkeoxjhdyduucpmrxmaivacmybmsdrzwqxvbxsy'\n",
    "               'gzsabdjmdjabeorttiwinfrpmpogvabiofqexnohrqu')\n",
    "        plaintext = 'adaywithoutlaughterisadaywasted'\n",
    "        c = Cipher(key)\n",
    "        self.assertEqual(c.decode(c.encode(plaintext)), plaintext)\n",
    "\n",
    "    def test_cipher_compositiion2(self):\n",
    "        plaintext = 'adaywithoutlaughterisadaywasted'\n",
    "        c = Cipher()\n",
    "        self.assertEqual(c.decode(c.encode(plaintext)), plaintext)\n",
    "\n",
    "    def test_cipher_random_key(self):\n",
    "        c = Cipher()\n",
    "        self.assertTrue(\n",
    "            len(c.key) >= 100,\n",
    "            'A random key must be generated when no key is given!')\n",
    "        self.assertTrue(c.key.islower() and c.key.isalpha(),\n",
    "                        'All items in the key must be chars and lowercase!')\n",
    "\n",
    "    def test_cipher_wrong_key(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Cipher('a1cde')\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Cipher('aBcde')\n",
    "\n",
    "    # Utility functions\n",
    "    def setUp(self):\n",
    "        try:\n",
    "            self.assertRaisesRegex\n",
    "        except AttributeError:\n",
    "            self.assertRaisesRegex = self.assertRaisesRegexp\n",
    "\n",
    "    def assertRaisesWithMessage(self, exception):\n",
    "        return self.assertRaisesRegex(exception, r\".+\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
