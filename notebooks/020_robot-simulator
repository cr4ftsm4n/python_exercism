{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Robot Simulator\n",
    "\n",
    "Write a robot simulator.\n",
    "\n",
    "A robot factory's test facility needs a program to verify robot movements.\n",
    "\n",
    "The robots have three possible movements:\n",
    "\n",
    "- turn right\n",
    "- turn left\n",
    "- advance\n",
    "\n",
    "Robots are placed on a hypothetical infinite grid, facing a particular\n",
    "direction (north, east, south, or west) at a set of {x,y} coordinates,\n",
    "e.g., {3,8}, with coordinates increasing to the north and east.\n",
    "\n",
    "The robot then receives a number of instructions, at which point the\n",
    "testing facility verifies the robot's new position, and in which\n",
    "direction it is pointing.\n",
    "\n",
    "- The letter-string \"RAALAL\" means:\n",
    "  - Turn right\n",
    "  - Advance twice\n",
    "  - Turn left\n",
    "  - Advance once\n",
    "  - Turn left yet again\n",
    "- Say a robot starts at {7, 3} facing north. Then running this stream\n",
    "  of instructions should leave it at {9, 4} facing west.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test robot_simulator_test.py`\n",
    "- Python 3.3+: `pytest robot_simulator_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest robot_simulator_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/robot-simulator` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Inspired by an interview question at a famous company.\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Globals for the bearings\n",
    "# Change the values as you see fit\n",
    "EAST = None\n",
    "NORTH = None\n",
    "WEST = None\n",
    "SOUTH = None\n",
    "\n",
    "\n",
    "class Robot(object):\n",
    "    def __init__(self, bearing=NORTH, x=0, y=0):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v2.2.0\n",
    "\n",
    "class RobotTests(unittest.TestCase):\n",
    "    def test_init(self):\n",
    "        robot = Robot()\n",
    "        self.assertEqual(robot.coordinates, (0, 0))\n",
    "        self.assertEqual(robot.bearing, NORTH)\n",
    "\n",
    "    def test_setup(self):\n",
    "        robot = Robot(SOUTH, -1, 1)\n",
    "        self.assertEqual(robot.coordinates, (-1, 1))\n",
    "        self.assertEqual(robot.bearing, SOUTH)\n",
    "\n",
    "    def test_turn_right(self):\n",
    "        robot = Robot()\n",
    "        for direction in [EAST, SOUTH, WEST, NORTH]:\n",
    "            robot.turn_right()\n",
    "            self.assertEqual(robot.bearing, direction)\n",
    "\n",
    "    def test_turn_left(self):\n",
    "        robot = Robot()\n",
    "        for direction in [WEST, SOUTH, EAST, NORTH]:\n",
    "            robot.turn_left()\n",
    "            self.assertEqual(robot.bearing, direction)\n",
    "\n",
    "    def test_advance_positive_north(self):\n",
    "        robot = Robot(NORTH, 0, 0)\n",
    "        robot.advance()\n",
    "        self.assertEqual(robot.coordinates, (0, 1))\n",
    "        self.assertEqual(robot.bearing, NORTH)\n",
    "\n",
    "    def test_advance_negative_south(self):\n",
    "        robot = Robot(SOUTH, 0, 0)\n",
    "        robot.advance()\n",
    "        self.assertEqual(robot.coordinates, (0, -1))\n",
    "        self.assertEqual(robot.bearing, SOUTH)\n",
    "\n",
    "    def test_advance_positive_east(self):\n",
    "        robot = Robot(EAST, 0, 0)\n",
    "        robot.advance()\n",
    "        self.assertEqual(robot.coordinates, (1, 0))\n",
    "        self.assertEqual(robot.bearing, EAST)\n",
    "\n",
    "    def test_advance_negative_west(self):\n",
    "        robot = Robot(WEST, 0, 0)\n",
    "        robot.advance()\n",
    "        self.assertEqual(robot.coordinates, (-1, 0))\n",
    "        self.assertEqual(robot.bearing, WEST)\n",
    "\n",
    "    def test_simulate_prog1(self):\n",
    "        robot = Robot(NORTH, 0, 0)\n",
    "        robot.simulate(\"LAAARALA\")\n",
    "        self.assertEqual(robot.coordinates, (-4, 1))\n",
    "        self.assertEqual(robot.bearing, WEST)\n",
    "\n",
    "    def test_simulate_prog2(self):\n",
    "        robot = Robot(EAST, 2, -7)\n",
    "        robot.simulate(\"RRAAAAALA\")\n",
    "        self.assertEqual(robot.coordinates, (-3, -8))\n",
    "        self.assertEqual(robot.bearing, SOUTH)\n",
    "\n",
    "    def test_simulate_prog3(self):\n",
    "        robot = Robot(SOUTH, 8, 4)\n",
    "        robot.simulate(\"LAAARRRALLLL\")\n",
    "        self.assertEqual(robot.coordinates, (11, 5))\n",
    "        self.assertEqual(robot.bearing, NORTH)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
