{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Triangle\n",
    "\n",
    "Determine if a triangle is equilateral, isosceles, or scalene.\n",
    "\n",
    "An _equilateral_ triangle has all three sides the same length.\n",
    "\n",
    "An _isosceles_ triangle has at least two sides the same length. (It is sometimes\n",
    "specified as having exactly two sides the same length, but for the purposes of\n",
    "this exercise we'll say at least two.)\n",
    "\n",
    "A _scalene_ triangle has all sides of different lengths.\n",
    "\n",
    "## Note\n",
    "\n",
    "For a shape to be a triangle at all, all sides have to be of length > 0, and\n",
    "the sum of the lengths of any two sides must be greater than or equal to the\n",
    "length of the third side. See [Triangle Inequality](https://en.wikipedia.org/wiki/Triangle_inequality).\n",
    "\n",
    "## Dig Deeper\n",
    "\n",
    "The case where the sum of the lengths of two sides _equals_ that of the\n",
    "third is known as a _degenerate_ triangle - it has zero area and looks like\n",
    "a single line. Feel free to add your own code/tests to check for degenerate triangles.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test triangle_test.py`\n",
    "- Python 3.3+: `pytest triangle_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest triangle_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/triangle` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "The Ruby Koans triangle project, parts 1 & 2 [http://rubykoans.com](http://rubykoans.com)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_equilateral(sides):\n",
    "    pass\n",
    "\n",
    "\n",
    "def is_isosceles(sides):\n",
    "    pass\n",
    "\n",
    "\n",
    "def is_scalene(sides):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0\n",
    "\n",
    "class is_equilateralTests(unittest.TestCase):\n",
    "    def test_true_if_all_sides_are_equal(self):\n",
    "        self.assertIs(is_equilateral([2, 2, 2]), True)\n",
    "\n",
    "    def test_false_if_any_side_is_unequal(self):\n",
    "        self.assertIs(is_equilateral([2, 3, 2]), False)\n",
    "\n",
    "    def test_false_if_no_sides_are_equal(self):\n",
    "        self.assertIs(is_equilateral([5, 4, 6]), False)\n",
    "\n",
    "    def test_false_if_all_sides_are_zero(self):\n",
    "        self.assertIs(is_equilateral([0, 0, 0]), False)\n",
    "\n",
    "    def test_sides_may_be_floats(self):\n",
    "        self.assertIs(is_equilateral([0.5, 0.5, 0.5]), True)\n",
    "\n",
    "\n",
    "class is_isoscelesTests(unittest.TestCase):\n",
    "    def test_true_if_last_two_sides_are_equal(self):\n",
    "        self.assertIs(is_isosceles([3, 4, 4]), True)\n",
    "\n",
    "    def test_true_if_first_two_sides_are_equal(self):\n",
    "        self.assertIs(is_isosceles([4, 4, 3]), True)\n",
    "\n",
    "    def test_true_if_first_and_last_sides_are_equal(self):\n",
    "        self.assertIs(is_isosceles([4, 3, 4]), True)\n",
    "\n",
    "    def test_is_equilateral_triangles_are_also_is_isosceles(self):\n",
    "        self.assertIs(is_isosceles([4, 4, 4]), True)\n",
    "\n",
    "    def test_false_if_no_sides_are_equal(self):\n",
    "        self.assertIs(is_isosceles([2, 3, 4]), False)\n",
    "\n",
    "    def test_violation_of_triangle_inequality_not_is_isosceles(self):\n",
    "        self.assertIs(is_isosceles([1, 1, 3]), False)\n",
    "\n",
    "    def test_sides_may_be_floats(self):\n",
    "        self.assertIs(is_isosceles([0.5, 0.4, 0.5]), True)\n",
    "\n",
    "\n",
    "class is_scaleneTests(unittest.TestCase):\n",
    "    def test_true_if_no_sides_are_equal(self):\n",
    "        self.assertIs(is_scalene([5, 4, 6]), True)\n",
    "\n",
    "    def test_false_if_all_sides_are_equal(self):\n",
    "        self.assertIs(is_scalene([4, 4, 4]), False)\n",
    "\n",
    "    def test_false_if_two_sides_are_equal(self):\n",
    "        self.assertIs(is_scalene([4, 4, 3]), False)\n",
    "\n",
    "    def test_violation_of_triangle_inequality_not_is_scalene(self):\n",
    "        self.assertIs(is_scalene([7, 3, 2]), False)\n",
    "\n",
    "    def test_sides_may_be_floats(self):\n",
    "        self.assertIs(is_scalene([0.5, 0.4, 0.6]), True)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
