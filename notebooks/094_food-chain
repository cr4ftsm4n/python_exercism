{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Food Chain\n",
    "\n",
    "Generate the lyrics of the song 'I Know an Old Lady Who Swallowed a Fly'.\n",
    "\n",
    "While you could copy/paste the lyrics,\n",
    "or read them from a file, this problem is much more\n",
    "interesting if you approach it algorithmically.\n",
    "\n",
    "This is a [cumulative song](http://en.wikipedia.org/wiki/Cumulative_song) of unknown origin.\n",
    "\n",
    "This is one of many common variants.\n",
    "\n",
    "```text\n",
    "I know an old lady who swallowed a fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a spider.\n",
    "It wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a bird.\n",
    "How absurd to swallow a bird!\n",
    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a cat.\n",
    "Imagine that, to swallow a cat!\n",
    "She swallowed the cat to catch the bird.\n",
    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a dog.\n",
    "What a hog, to swallow a dog!\n",
    "She swallowed the dog to catch the cat.\n",
    "She swallowed the cat to catch the bird.\n",
    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a goat.\n",
    "Just opened her throat and swallowed a goat!\n",
    "She swallowed the goat to catch the dog.\n",
    "She swallowed the dog to catch the cat.\n",
    "She swallowed the cat to catch the bird.\n",
    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a cow.\n",
    "I don't know how she swallowed a cow!\n",
    "She swallowed the cow to catch the goat.\n",
    "She swallowed the goat to catch the dog.\n",
    "She swallowed the dog to catch the cat.\n",
    "She swallowed the cat to catch the bird.\n",
    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n",
    "She swallowed the spider to catch the fly.\n",
    "I don't know why she swallowed the fly. Perhaps she'll die.\n",
    "\n",
    "I know an old lady who swallowed a horse.\n",
    "She's dead, of course!\n",
    "```\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test food_chain_test.py`\n",
    "- Python 3.3+: `pytest food_chain_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest food_chain_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/food-chain` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Wikipedia [http://en.wikipedia.org/wiki/There_Was_an_Old_Lady_Who_Swallowed_a_Fly](http://en.wikipedia.org/wiki/There_Was_an_Old_Lady_Who_Swallowed_a_Fly)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def recite(start_verse, end_verse):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v2.1.0\n",
    "\n",
    "class FoodChainTest(unittest.TestCase):\n",
    "\n",
    "    def test_fly(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(1, 1), expected)\n",
    "\n",
    "    def test_spider(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a spider.\"\n",
    "            \"It wriggled and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(2, 2), expected)\n",
    "\n",
    "    def test_bird(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a bird.\"\n",
    "            \"How absurd to swallow a bird!\"\n",
    "            \"She swallowed the bird to catch the spider that \"\n",
    "            \"wriggled and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(3, 3), expected)\n",
    "\n",
    "    def test_cat(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a cat.\"\n",
    "            \"Imagine that, to swallow a cat!\"\n",
    "            \"She swallowed the cat to catch the bird.\"\n",
    "            \"She swallowed the bird to catch the spider that \"\n",
    "            \"wriggled and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(4, 4), expected)\n",
    "\n",
    "    def test_dog(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a dog.\"\n",
    "            \"What a hog, to swallow a dog!\"\n",
    "            \"She swallowed the dog to catch the cat.\"\n",
    "            \"She swallowed the cat to catch the bird.\"\n",
    "            \"She swallowed the bird to catch the spider that wriggled \"\n",
    "            \"and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(5, 5), expected)\n",
    "\n",
    "    def test_goat(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a goat.\"\n",
    "            \"Just opened her throat and swallowed a goat!\"\n",
    "            \"She swallowed the goat to catch the dog.\"\n",
    "            \"She swallowed the dog to catch the cat.\"\n",
    "            \"She swallowed the cat to catch the bird.\"\n",
    "            \"She swallowed the bird to catch the spider that \"\n",
    "            \"wriggled and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(6, 6), expected)\n",
    "\n",
    "    def test_cow(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a cow.\"\n",
    "            \"I don't know how she swallowed a cow!\"\n",
    "            \"She swallowed the cow to catch the goat.\"\n",
    "            \"She swallowed the goat to catch the dog.\"\n",
    "            \"She swallowed the dog to catch the cat.\"\n",
    "            \"She swallowed the cat to catch the bird.\"\n",
    "            \"She swallowed the bird to catch the spider that \"\n",
    "            \"wriggled and jiggled and tickled inside her.\"\n",
    "            \"She swallowed the spider to catch the fly.\"\n",
    "            \"I don't know why she swallowed the fly. Perhaps she'll die.\"\n",
    "        ]\n",
    "        self.assertEqual(recite(7, 7), expected)\n",
    "\n",
    "    def test_horse(self):\n",
    "        expected = [\n",
    "            \"I know an old lady who swallowed a horse.\"\n",
    "            \"She's dead, of course!\"\n",
    "        ]\n",
    "        self.assertEqual(recite(8, 8), expected)\n",
    "\n",
    "    def test_multiple_verses(self):\n",
    "        expected = [recite(n, n)[0] for n in range(1, 4)]\n",
    "        self.assertEqual(recite(1, 3), expected)\n",
    "\n",
    "    def test_full_song(self):\n",
    "        expected = [recite(n, n)[0] for n in range(1, 9)]\n",
    "        self.assertEqual(recite(1, 8), expected)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
