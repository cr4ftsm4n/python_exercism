{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bracket Push\n",
    "\n",
    "Given a string containing brackets `[]`, braces `{}` and parentheses `()`,\n",
    "verify that all the pairs are matched and nested correctly.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test bracket_push_test.py`\n",
    "- Python 3.3+: `pytest bracket_push_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest bracket_push_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/bracket-push` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Ginna Baker\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_paired(input_string):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.3.0\n",
    "\n",
    "class BracketPushTests(unittest.TestCase):\n",
    "    def test_paired_square_brackets(self):\n",
    "        self.assertEqual(is_paired(\"[]\"), True)\n",
    "\n",
    "    def test_empty_string(self):\n",
    "        self.assertEqual(is_paired(\"\"), True)\n",
    "\n",
    "    def test_unpaired_brackets(self):\n",
    "        self.assertEqual(is_paired(\"[[\"), False)\n",
    "\n",
    "    def test_wrong_ordered_brackets(self):\n",
    "        self.assertEqual(is_paired(\"}{\"), False)\n",
    "\n",
    "    def test_wrong_closing_bracket(self):\n",
    "        self.assertEqual(is_paired(\"{]\"), False)\n",
    "\n",
    "    def test_paired_with_whitespace(self):\n",
    "        self.assertEqual(is_paired(\"{ }\"), True)\n",
    "\n",
    "    def test_partially_paired_brackets(self):\n",
    "        self.assertEqual(is_paired(\"{[])\"), False)\n",
    "\n",
    "    def test_simple_nested_brackets(self):\n",
    "        self.assertEqual(is_paired(\"{[]}\"), True)\n",
    "\n",
    "    def test_several_paired_brackets(self):\n",
    "        self.assertEqual(is_paired(\"{}[]\"), True)\n",
    "\n",
    "    def test_paired_and_nested_brackets(self):\n",
    "        self.assertEqual(is_paired(\"([{}({}[])])\"), True)\n",
    "\n",
    "    def test_unopened_closing_brackets(self):\n",
    "        self.assertEqual(is_paired(\"{[)][]}\"), False)\n",
    "\n",
    "    def test_unpaired_and_nested_brackets(self):\n",
    "        self.assertEqual(is_paired(\"([{])\"), False)\n",
    "\n",
    "    def test_paired_and_wrong_nested_brackets(self):\n",
    "        self.assertEqual(is_paired(\"[({]})\"), False)\n",
    "\n",
    "    def test_math_expression(self):\n",
    "        self.assertEqual(\n",
    "            is_paired(\"(((185 + 223.85) * 15) - 543)/2\"), True)\n",
    "\n",
    "    def test_complex_latex_expression(self):\n",
    "        self.assertEqual(\n",
    "            is_paired(\n",
    "                (\"\\\\left(\\\\begin{array}{cc} \\\\frac{1}{3} & x\\\\\\\\ \\\\mathrm{e}^{\"\n",
    "                 \"x} &... x^2 \\\\end{array}\\\\right)\")), True)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
