{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binary Search Tree\n",
    "\n",
    "Insert and search for numbers in a binary tree.\n",
    "\n",
    "When we need to represent sorted data, an array does not make a good\n",
    "data structure.\n",
    "\n",
    "Say we have the array `[1, 3, 4, 5]`, and we add 2 to it so it becomes\n",
    "`[1, 3, 4, 5, 2]` now we must sort the entire array again! We can\n",
    "improve on this by realizing that we only need to make space for the new\n",
    "item `[1, nil, 3, 4, 5]`, and then adding the item in the space we\n",
    "added. But this still requires us to shift many elements down by one.\n",
    "\n",
    "Binary Search Trees, however, can operate on sorted data much more\n",
    "efficiently.\n",
    "\n",
    "A binary search tree consists of a series of connected nodes. Each node\n",
    "contains a piece of data (e.g. the number 3), a variable named `left`,\n",
    "and a variable named `right`. The `left` and `right` variables point at\n",
    "`nil`, or other nodes. Since these other nodes in turn have other nodes\n",
    "beneath them, we say that the left and right variables are pointing at\n",
    "subtrees. All data in the left subtree is less than or equal to the\n",
    "current node's data, and all data in the right subtree is greater than\n",
    "the current node's data.\n",
    "\n",
    "For example, if we had a node containing the data 4, and we added the\n",
    "data 2, our tree would look like this:\n",
    "\n",
    "      4\n",
    "     /\n",
    "    2\n",
    "\n",
    "If we then added 6, it would look like this:\n",
    "\n",
    "      4\n",
    "     / \\\n",
    "    2   6\n",
    "\n",
    "If we then added 3, it would look like this\n",
    "\n",
    "       4\n",
    "     /   \\\n",
    "    2     6\n",
    "     \\\n",
    "      3\n",
    "\n",
    "And if we then added 1, 5, and 7, it would look like this\n",
    "\n",
    "          4\n",
    "        /   \\\n",
    "       /     \\\n",
    "      2       6\n",
    "     / \\     / \\\n",
    "    1   3   5   7\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test binary_search_tree_test.py`\n",
    "- Python 3.3+: `pytest binary_search_tree_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest binary_search_tree_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/binary-search-tree` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Josh Cheek [https://twitter.com/josh_cheek](https://twitter.com/josh_cheek)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TreeNode(object):\n",
    "    def __init__(self, data, left, right):\n",
    "        self.data = None\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "    def __str__(self):\n",
    "        fmt = 'TreeNode(data={}, left={}, right={})'\n",
    "        return fmt.format(self.data, self.left, self.right)\n",
    "\n",
    "\n",
    "class BinarySearchTree(object):\n",
    "    def __init__(self, tree_data):\n",
    "        pass\n",
    "\n",
    "    def data(self):\n",
    "        pass\n",
    "\n",
    "    def sorted_data(self):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.0.0\n",
    "\n",
    "class BinarySearchTreeTests(unittest.TestCase):\n",
    "\n",
    "    def test_data_is_retained(self):\n",
    "        expected = TreeNode('4', None, None)\n",
    "        self.assertTreeEqual(BinarySearchTree(['4']).data(), expected)\n",
    "\n",
    "    # Test inserting data at proper node\n",
    "    def test_smaller_data_at_left_node(self):\n",
    "        expected = TreeNode('4', TreeNode('2', None, None), None)\n",
    "        self.assertTreeEqual(BinarySearchTree(['4', '2']).data(), expected)\n",
    "\n",
    "    def test_same_number_at_left_node(self):\n",
    "        expected = TreeNode('4', TreeNode('4', None, None), None)\n",
    "        self.assertTreeEqual(BinarySearchTree(['4', '4']).data(), expected)\n",
    "\n",
    "    def test_greater_number_at_right_node(self):\n",
    "        expected = TreeNode('4', None, TreeNode('5', None, None))\n",
    "        self.assertTreeEqual(BinarySearchTree(['4', '5']).data(), expected)\n",
    "\n",
    "    def test_can_create_complex_tree(self):\n",
    "        expected = TreeNode(\n",
    "            '4',\n",
    "            TreeNode(\n",
    "                '2',\n",
    "                TreeNode('1', None, None),\n",
    "                TreeNode('3', None, None)\n",
    "            ),\n",
    "            TreeNode(\n",
    "                '6',\n",
    "                TreeNode('5', None, None),\n",
    "                TreeNode('7', None, None)\n",
    "            )\n",
    "        )\n",
    "        self.assertTreeEqual(\n",
    "            BinarySearchTree(['4', '2', '6', '1', '3', '5', '7']).data(),\n",
    "            expected\n",
    "        )\n",
    "\n",
    "    # Test can sort data\n",
    "    def test_can_sort_single_number(self):\n",
    "        self.assertEqual(BinarySearchTree(['2']).sorted_data(), ['2'])\n",
    "\n",
    "    def test_can_sort_if_second_number_is_smaller_than_first(self):\n",
    "        self.assertEqual(\n",
    "            BinarySearchTree(['2', '1']).sorted_data(), ['1', '2']\n",
    "        )\n",
    "\n",
    "    def test_can_sort_if_second_number_is_same_as_first(self):\n",
    "        self.assertEqual(\n",
    "            BinarySearchTree(['2', '2']).sorted_data(), ['2', '2']\n",
    "        )\n",
    "\n",
    "    def test_can_sort_if_second_number_is_greater_than_first(self):\n",
    "        self.assertEqual(\n",
    "            BinarySearchTree(['2', '3']).sorted_data(), ['2', '3']\n",
    "        )\n",
    "\n",
    "    def test_can_sort_complex_tree(self):\n",
    "        self.assertEqual(\n",
    "            BinarySearchTree(['2', '1', '3', '6', '7', '5']).sorted_data(),\n",
    "            ['1', '2', '3', '5', '6', '7']\n",
    "        )\n",
    "\n",
    "    # Utilities\n",
    "    def assertTreeEqual(self, tree_one, tree_two):\n",
    "        try:\n",
    "            self.compare_tree(tree_one, tree_two)\n",
    "        except AssertionError:\n",
    "            raise AssertionError(\"{} != {}\".format(tree_one, tree_two))\n",
    "\n",
    "    def compare_tree(self, tree_one, tree_two):\n",
    "        self.assertEqual(tree_one.data, tree_two.data)\n",
    "\n",
    "        # Compare left tree nodes\n",
    "        if tree_one.left and tree_two.left:\n",
    "            self.compare_tree(tree_one.left, tree_two.left)\n",
    "        elif tree_one.left is None and tree_two.left is None:\n",
    "            pass\n",
    "        else:\n",
    "            raise AssertionError\n",
    "\n",
    "        # Compare right tree nodes\n",
    "        if tree_one.right and tree_two.right:\n",
    "            self.compare_tree(tree_one.right, tree_two.right)\n",
    "        elif tree_one.right is None and tree_two.right is None:\n",
    "            pass\n",
    "        else:\n",
    "            raise AssertionError\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
