{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grade School\n",
    "\n",
    "Given students' names along with the grade that they are in, create a roster\n",
    "for the school.\n",
    "\n",
    "In the end, you should be able to:\n",
    "\n",
    "- Add a student's name to the roster for a grade\n",
    "  - \"Add Jim to grade 2.\"\n",
    "  - \"OK.\"\n",
    "- Get a list of all students enrolled in a grade\n",
    "  - \"Which students are in grade 2?\"\n",
    "  - \"We've only got Jim just now.\"\n",
    "- Get a sorted list of all students in all grades.  Grades should sort\n",
    "  as 1, 2, 3, etc., and students within a grade should be sorted\n",
    "  alphabetically by name.\n",
    "  - \"Who all is enrolled in school right now?\"\n",
    "  - \"Grade 1: Anna, Barb, and Charlie. Grade 2: Alex, Peter, and Zoe.\n",
    "    Grade 3â€¦\"\n",
    "\n",
    "Note that all our students only have one name.  (It's a small town, what\n",
    "do you want?)\n",
    "\n",
    "## For bonus points\n",
    "\n",
    "Did you get the tests passing and the code clean? If you want to, these\n",
    "are some additional things you could try:\n",
    "\n",
    "- If you're working in a language with mutable data structures and your\n",
    "  implementation allows outside code to mutate the school's internal DB\n",
    "  directly, see if you can prevent this. Feel free to introduce additional\n",
    "  tests.\n",
    "\n",
    "Then please share your thoughts in a comment on the submission. Did this\n",
    "experiment make the code better? Worse? Did you learn anything from it?\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test grade_school_test.py`\n",
    "- Python 3.3+: `pytest grade_school_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest grade_school_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/grade-school` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "A pairing session with Phil Battos at gSchool [http://gschool.it](http://gschool.it)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class School(object):\n",
    "    def __init__(self, name):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "from collections import Sequence\n",
    "from types import GeneratorType\n",
    "\n",
    "\n",
    "\n",
    "class SchoolTest(unittest.TestCase):\n",
    "    def setUp(self):\n",
    "        # assertCountEqual is py3, py2 only knowns assetItemsEqual\n",
    "        if not hasattr(self, 'assertCountEqual'):\n",
    "            self.assertCountEqual = self.assertItemsEqual\n",
    "        self.school = School(\"Haleakala Hippy School\")\n",
    "\n",
    "    def test_an_empty_school(self):\n",
    "        for n in range(1, 9):\n",
    "            self.assertCountEqual(self.school.grade(n), set())\n",
    "\n",
    "    def test_add_student(self):\n",
    "        self.school.add(\"Aimee\", 2)\n",
    "        self.assertCountEqual(self.school.grade(2), (\"Aimee\", ))\n",
    "\n",
    "    def test_add_more_students_in_same_class(self):\n",
    "        self.school.add(\"James\", 2)\n",
    "        self.school.add(\"Blair\", 2)\n",
    "        self.school.add(\"Paul\", 2)\n",
    "        self.assertCountEqual(self.school.grade(2), (\"James\", \"Blair\", \"Paul\"))\n",
    "\n",
    "    def test_add_students_to_different_grades(self):\n",
    "        self.school.add(\"Chelsea\", 3)\n",
    "        self.school.add(\"Logan\", 7)\n",
    "        self.assertCountEqual(self.school.grade(3), (\"Chelsea\", ))\n",
    "        self.assertCountEqual(self.school.grade(7), (\"Logan\", ))\n",
    "\n",
    "    def test_get_students_in_a_grade(self):\n",
    "        self.school.add(\"Franklin\", 5)\n",
    "        self.school.add(\"Bradley\", 5)\n",
    "        self.school.add(\"Jeff\", 1)\n",
    "        self.assertCountEqual(self.school.grade(5), (\"Franklin\", \"Bradley\"))\n",
    "\n",
    "    def test_get_students_in_a_non_existant_grade(self):\n",
    "        self.assertCountEqual(self.school.grade(1), set())\n",
    "\n",
    "    def test_sort_school(self):\n",
    "        students = [(3, (\"Kyle\", )), (4, (\"Christopher\", \"Jennifer\", )),\n",
    "                    (6, (\"Kareem\", ))]\n",
    "\n",
    "        for grade, students_in_grade in students[::-1]:\n",
    "            for student in students_in_grade[::-1]:\n",
    "                self.school.add(student, grade)\n",
    "\n",
    "        result = self.school.sort()\n",
    "\n",
    "        # Attempts to catch false positives\n",
    "        self.assertTrue(\n",
    "            isinstance(result, Sequence) or\n",
    "            isinstance(result, GeneratorType) or\n",
    "            callable(getattr(result, '__reversed__', False)))\n",
    "\n",
    "        result_list = list(result.items()\n",
    "                           if hasattr(result, \"items\") else result)\n",
    "\n",
    "        self.assertEqual(students, result_list)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
