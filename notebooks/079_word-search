{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Word Search\n",
    "\n",
    "In word search puzzles you get a square of letters and have to find specific\n",
    "words in them.\n",
    "\n",
    "For example:\n",
    "\n",
    "```text\n",
    "jefblpepre\n",
    "camdcimgtc\n",
    "oivokprjsm\n",
    "pbwasqroua\n",
    "rixilelhrs\n",
    "wolcqlirpc\n",
    "screeaumgr\n",
    "alxhpburyi\n",
    "jalaycalmp\n",
    "clojurermt\n",
    "```\n",
    "\n",
    "There are several programming languages hidden in the above square.\n",
    "\n",
    "Words can be hidden in all kinds of directions: left-to-right, right-to-left,\n",
    "vertical and diagonal.\n",
    "\n",
    "Given a puzzle and a list of words return the location of the first and last\n",
    "letter of each word.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test word_search_test.py`\n",
    "- Python 3.3+: `pytest word_search_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest word_search_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/word-search` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Point(object):\n",
    "    def __init__(self, x, y):\n",
    "        self.x = None\n",
    "        self.y = None\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        return self.x == other.x and self.y == other.y\n",
    "\n",
    "\n",
    "class WordSearch(object):\n",
    "    def __init__(self, puzzle):\n",
    "        pass\n",
    "\n",
    "    def search(self, word):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0\n",
    "\n",
    "class WordSearchTests(unittest.TestCase):\n",
    "\n",
    "    def test_initial_game_grid(self):\n",
    "        puzzle = ['jefblpepre']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertIsNone(searchAnswer)\n",
    "\n",
    "    def test_left_to_right_word(self):\n",
    "        puzzle = ['clojurermt']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 0), Point(6, 0)))\n",
    "\n",
    "    def test_left_to_right_word_different_position(self):\n",
    "        puzzle = ['mtclojurer']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(2, 0), Point(8, 0)))\n",
    "\n",
    "    def test_different_left_to_right_word(self):\n",
    "        puzzle = ['coffeelplx']\n",
    "        searchAnswer = WordSearch(puzzle).search('coffee')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 0), Point(5, 0)))\n",
    "\n",
    "    def test_different_left_to_right_word_different_position(self):\n",
    "        puzzle = ['xcoffeezlp']\n",
    "        searchAnswer = WordSearch(puzzle).search('coffee')\n",
    "        self.assertEqual(searchAnswer, (Point(1, 0), Point(6, 0)))\n",
    "\n",
    "    def test_left_to_right_word_two_lines(self):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'tclojurerm']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(1, 1), Point(7, 1)))\n",
    "\n",
    "    def test_left_to_right_word_three_lines(self):\n",
    "        puzzle = ['camdcimgtc',\n",
    "                  'jefblpepre',\n",
    "                  'clojurermt']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 2), Point(6, 2)))\n",
    "\n",
    "    def test_left_to_right_word_ten_lines(self):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'camdcimgtc',\n",
    "                  'oivokprjsm',\n",
    "                  'pbwasqroua',\n",
    "                  'rixilelhrs',\n",
    "                  'wolcqlirpc',\n",
    "                  'screeaumgr',\n",
    "                  'alxhpburyi',\n",
    "                  'jalaycalmp',\n",
    "                  'clojurermt']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 9), Point(6, 9)))\n",
    "\n",
    "    def test_left_to_right_word_ten_lines_different_position(self):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'camdcimgtc',\n",
    "                  'oivokprjsm',\n",
    "                  'pbwasqroua',\n",
    "                  'rixilelhrs',\n",
    "                  'wolcqlirpc',\n",
    "                  'screeaumgr',\n",
    "                  'alxhpburyi',\n",
    "                  'clojurermt',\n",
    "                  'jalaycalmp']\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 8), Point(6, 8)))\n",
    "\n",
    "    def test_different_left_to_right_word_ten_lines(self):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'camdcimgtc',\n",
    "                  'oivokprjsm',\n",
    "                  'pbwasqroua',\n",
    "                  'rixilelhrs',\n",
    "                  'wolcqlirpc',\n",
    "                  'fortranftw',\n",
    "                  'alxhpburyi',\n",
    "                  'clojurermt',\n",
    "                  'jalaycalmp']\n",
    "        searchAnswer = WordSearch(puzzle).search('fortran')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 6), Point(6, 6)))\n",
    "\n",
    "    def test_multiple_words(self):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'camdcimgtc',\n",
    "                  'oivokprjsm',\n",
    "                  'pbwasqroua',\n",
    "                  'rixilelhrs',\n",
    "                  'wolcqlirpc',\n",
    "                  'fortranftw',\n",
    "                  'alxhpburyi',\n",
    "                  'jalaycalmp',\n",
    "                  'clojurermt']\n",
    "        searchAnswer = WordSearch(puzzle).search('fortran')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 6), Point(6, 6)))\n",
    "        searchAnswer = WordSearch(puzzle).search('clojure')\n",
    "        self.assertEqual(searchAnswer, (Point(0, 9), Point(6, 9)))\n",
    "\n",
    "    def test_single_word_right_to_left(self):\n",
    "        puzzle = ['rixilelhrs']\n",
    "        searchAnswer = WordSearch(puzzle).search('elixir')\n",
    "        self.assertEqual(searchAnswer, (Point(5, 0), Point(0, 0)))\n",
    "\n",
    "    @classmethod\n",
    "    def setUpClass(cls):\n",
    "        puzzle = ['jefblpepre',\n",
    "                  'camdcimgtc',\n",
    "                  'oivokprjsm',\n",
    "                  'pbwasqroua',\n",
    "                  'rixilelhrs',\n",
    "                  'wolcqlirpc',\n",
    "                  'screeaumgr',\n",
    "                  'alxhpburyi',\n",
    "                  'jalaycalmp',\n",
    "                  'clojurermt']\n",
    "        cls.example = WordSearch(puzzle)\n",
    "\n",
    "    def test_horizontal_words_different_directions(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('clojure'),\n",
    "            (Point(0, 9), Point(6, 9))\n",
    "        )\n",
    "        self.assertEqual(\n",
    "            self.example.search('elixir'),\n",
    "            (Point(5, 4), Point(0, 4))\n",
    "        )\n",
    "\n",
    "    def test_vertical_words_top_to_bottom(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('ecmascript'),\n",
    "            (Point(9, 0), Point(9, 9))\n",
    "        )\n",
    "\n",
    "    def test_vertical_words_bottom_to_top(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('rust'),\n",
    "            (Point(8, 4), Point(8, 1))\n",
    "        )\n",
    "\n",
    "    def test_diagonal_words_top_left_to_bottom_right(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('java'),\n",
    "            (Point(0, 0), Point(3, 3))\n",
    "        )\n",
    "\n",
    "    def test_diagonal_upper_bottom_right_to_top_left(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('lua'),\n",
    "            (Point(7, 8), Point(5, 6))\n",
    "        )\n",
    "\n",
    "    def test_diagonal_upper_bottom_left_to_top_right(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('lisp'),\n",
    "            (Point(2, 5), Point(5, 2))\n",
    "        )\n",
    "\n",
    "    def test_diagonal_upper_top_right_to_bottom_left(self):\n",
    "        self.assertEqual(\n",
    "            self.example.search('ruby'),\n",
    "            (Point(7, 5), Point(4, 8))\n",
    "        )\n",
    "\n",
    "    def test_words_that_are_not_in_the_puzzle(self):\n",
    "        self.assertIsNone(self.example.search('haskell'))\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
