{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Binary Search\n",
    "\n",
    "Implement a binary search algorithm.\n",
    "\n",
    "Searching a sorted collection is a common task. A dictionary is a sorted\n",
    "list of word definitions. Given a word, one can find its definition. A\n",
    "telephone book is a sorted list of people's names, addresses, and\n",
    "telephone numbers. Knowing someone's name allows one to quickly find\n",
    "their telephone number and address.\n",
    "\n",
    "If the list to be searched contains more than a few items (a dozen, say)\n",
    "a binary search will require far fewer comparisons than a linear search,\n",
    "but it imposes the requirement that the list be sorted.\n",
    "\n",
    "In computer science, a binary search or half-interval search algorithm\n",
    "finds the position of a specified input value (the search \"key\") within\n",
    "an array sorted by key value.\n",
    "\n",
    "In each step, the algorithm compares the search key value with the key\n",
    "value of the middle element of the array.\n",
    "\n",
    "If the keys match, then a matching element has been found and its index,\n",
    "or position, is returned.\n",
    "\n",
    "Otherwise, if the search key is less than the middle element's key, then\n",
    "the algorithm repeats its action on the sub-array to the left of the\n",
    "middle element or, if the search key is greater, on the sub-array to the\n",
    "right.\n",
    "\n",
    "If the remaining array to be searched is empty, then the key cannot be\n",
    "found in the array and a special \"not found\" indication is returned.\n",
    "\n",
    "A binary search halves the number of items to check with each iteration,\n",
    "so locating an item (or determining its absence) takes logarithmic time.\n",
    "A binary search is a dichotomic divide and conquer search algorithm.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test binary_search_test.py`\n",
    "- Python 3.3+: `pytest binary_search_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest binary_search_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/binary-search` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Wikipedia [http://en.wikipedia.org/wiki/Binary_search_algorithm](http://en.wikipedia.org/wiki/Binary_search_algorithm)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def binary_search(list_of_numbers, number):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0\n",
    "\n",
    "class BinarySearchTests(unittest.TestCase):\n",
    "    def test_finds_value_in_array_with_one_element(self):\n",
    "        self.assertEqual(binary_search([6], 6), 0)\n",
    "\n",
    "    def test_finds_value_in_middle_of_array(self):\n",
    "        self.assertEqual(binary_search([1, 3, 4, 6, 8, 9, 11], 6), 3)\n",
    "\n",
    "    def test_finds_value_at_beginning_of_array(self):\n",
    "        self.assertEqual(binary_search([1, 3, 4, 6, 8, 9, 11], 1), 0)\n",
    "\n",
    "    def test_finds_value_at_end_of_array(self):\n",
    "        self.assertEqual(binary_search([1, 3, 4, 6, 8, 9, 11], 11), 6)\n",
    "\n",
    "    def test_finds_value_in_array_of_odd_length(self):\n",
    "        self.assertEqual(\n",
    "            binary_search([1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634],\n",
    "                          144), 9)\n",
    "\n",
    "    def test_finds_value_in_array_of_even_length(self):\n",
    "        self.assertEqual(\n",
    "            binary_search([1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 21),\n",
    "            5)\n",
    "\n",
    "    def test_identifies_value_missing(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            binary_search([1, 3, 4, 6, 8, 9, 11], 7)\n",
    "\n",
    "    def test_value_smaller_than_arrays_minimum(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            binary_search([1, 3, 4, 6, 8, 9, 11], 0)\n",
    "\n",
    "    def test_value_larger_than_arrays_maximum(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            binary_search([1, 3, 4, 6, 8, 9, 11], 13)\n",
    "\n",
    "    def test_empty_array(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            binary_search([], 1)\n",
    "\n",
    "    # Utility functions\n",
    "    def setUp(self):\n",
    "        try:\n",
    "            self.assertRaisesRegex\n",
    "        except AttributeError:\n",
    "            self.assertRaisesRegex = self.assertRaisesRegexp\n",
    "\n",
    "    def assertRaisesWithMessage(self, exception):\n",
    "        return self.assertRaisesRegex(exception, r\".+\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
