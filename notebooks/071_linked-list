{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linked List\n",
    "\n",
    "Implement a doubly linked list.\n",
    "\n",
    "Like an array, a linked list is a simple linear data structure. Several\n",
    "common data types can be implemented using linked lists, like queues,\n",
    "stacks, and associative arrays.\n",
    "\n",
    "A linked list is a collection of data elements called *nodes*. In a\n",
    "*singly linked list* each node holds a value and a link to the next node.\n",
    "In a *doubly linked list* each node also holds a link to the previous\n",
    "node.\n",
    "\n",
    "You will write an implementation of a doubly linked list. Implement a\n",
    "Node to hold a value and pointers to the next and previous nodes. Then\n",
    "implement a List which holds references to the first and last node and\n",
    "offers an array-like interface for adding and removing items:\n",
    "\n",
    "* `push` (*insert value at back*);\n",
    "* `pop` (*remove value at back*);\n",
    "* `shift` (*remove value at front*).\n",
    "* `unshift` (*insert value at front*);\n",
    "\n",
    "To keep your implementation simple, the tests will not cover error\n",
    "conditions. Specifically: `pop` or `shift` will never be called on an\n",
    "empty list.\n",
    "\n",
    "If you want to know more about linked lists, check [Wikipedia](https://en.wikipedia.org/wiki/Linked_list).\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test linked_list_test.py`\n",
    "- Python 3.3+: `pytest linked_list_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest linked_list_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/linked-list` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Classic computer science topic\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node(object):\n",
    "    def __init__(self, value, next=None, previous=None):\n",
    "        pass\n",
    "\n",
    "\n",
    "class LinkedList(object):\n",
    "    def __init__(self):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "class LinkedListTests(unittest.TestCase):\n",
    "    def setUp(self):\n",
    "        self.list = LinkedList()\n",
    "\n",
    "    def test_push_pop(self):\n",
    "        self.list.push(10)\n",
    "        self.list.push(20)\n",
    "        self.assertEqual(self.list.pop(), 20)\n",
    "        self.assertEqual(self.list.pop(), 10)\n",
    "\n",
    "    def test_push_shift(self):\n",
    "        self.list.push(10)\n",
    "        self.list.push(20)\n",
    "        self.assertEqual(self.list.shift(), 10)\n",
    "        self.assertEqual(self.list.shift(), 20)\n",
    "\n",
    "    def test_unshift_shift(self):\n",
    "        self.list.unshift(10)\n",
    "        self.list.unshift(20)\n",
    "        self.assertEqual(self.list.shift(), 20)\n",
    "        self.assertEqual(self.list.shift(), 10)\n",
    "\n",
    "    def test_unshift_pop(self):\n",
    "        self.list.unshift(10)\n",
    "        self.list.unshift(20)\n",
    "        self.assertEqual(self.list.pop(), 10)\n",
    "        self.assertEqual(self.list.pop(), 20)\n",
    "\n",
    "    def test_all(self):\n",
    "        self.list.push(10)\n",
    "        self.list.push(20)\n",
    "        self.assertEqual(self.list.pop(), 20)\n",
    "        self.list.push(30)\n",
    "        self.assertEqual(self.list.shift(), 10)\n",
    "        self.list.unshift(40)\n",
    "        self.list.push(50)\n",
    "        self.assertEqual(self.list.shift(), 40)\n",
    "        self.assertEqual(self.list.pop(), 50)\n",
    "        self.assertEqual(self.list.shift(), 30)\n",
    "\n",
    "    @unittest.skip(\"extra-credit\")\n",
    "    def test_length(self):\n",
    "        self.list.push(10)\n",
    "        self.list.push(20)\n",
    "        self.assertEqual(len(self.list), 2)\n",
    "        self.list.shift()\n",
    "        self.assertEqual(len(self.list), 1)\n",
    "        self.list.pop()\n",
    "        self.assertEqual(len(self.list), 0)\n",
    "\n",
    "    @unittest.skip(\"extra-credit\")\n",
    "    def test_iterator(self):\n",
    "        self.list.push(10)\n",
    "        self.list.push(20)\n",
    "        iterator = iter(self.list)\n",
    "        self.assertEqual(next(iterator), 10)\n",
    "        self.assertEqual(next(iterator), 20)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
