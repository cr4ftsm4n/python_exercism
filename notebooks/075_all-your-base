{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# All Your Base\n",
    "\n",
    "Convert a number, represented as a sequence of digits in one base, to any other base.\n",
    "\n",
    "Implement general base conversion. Given a number in base **a**,\n",
    "represented as a sequence of digits, convert it to base **b**.\n",
    "\n",
    "## Note\n",
    "\n",
    "- Try to implement the conversion yourself.\n",
    "  Do not use something else to perform the conversion for you.\n",
    "\n",
    "## About [Positional Notation](https://en.wikipedia.org/wiki/Positional_notation)\n",
    "\n",
    "In positional notation, a number in base **b** can be understood as a linear\n",
    "combination of powers of **b**.\n",
    "\n",
    "The number 42, *in base 10*, means:\n",
    "\n",
    "(4 * 10^1) + (2 * 10^0)\n",
    "\n",
    "The number 101010, *in base 2*, means:\n",
    "\n",
    "(1 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)\n",
    "\n",
    "The number 1120, *in base 3*, means:\n",
    "\n",
    "(1 * 3^3) + (1 * 3^2) + (2 * 3^1) + (0 * 3^0)\n",
    "\n",
    "I think you got the idea!\n",
    "\n",
    "*Yes. Those three numbers above are exactly the same. Congratulations!*\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test all_your_base_test.py`\n",
    "- Python 3.3+: `pytest all_your_base_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest all_your_base_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/all-your-base` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rebase(input_base, digits, output_base):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v2.3.0\n",
    "\n",
    "class AllYourBaseTests(unittest.TestCase):\n",
    "\n",
    "    def test_single_bit_to_one_decimal(self):\n",
    "        self.assertEqual(rebase(2, [1], 10), [1])\n",
    "\n",
    "    def test_binary_to_single_decimal(self):\n",
    "        self.assertEqual(rebase(2, [1, 0, 1], 10), [5])\n",
    "\n",
    "    def test_single_decimal_to_binary(self):\n",
    "        self.assertEqual(rebase(10, [5], 2), [1, 0, 1])\n",
    "\n",
    "    def test_binary_to_multiple_decimal(self):\n",
    "        self.assertEqual(rebase(2, [1, 0, 1, 0, 1, 0], 10), [4, 2])\n",
    "\n",
    "    def test_decimal_to_binary(self):\n",
    "        self.assertEqual(rebase(10, [4, 2], 2), [1, 0, 1, 0, 1, 0])\n",
    "\n",
    "    def test_trinary_to_hexadecimal(self):\n",
    "        self.assertEqual(rebase(3, [1, 1, 2, 0], 16), [2, 10])\n",
    "\n",
    "    def test_hexadecimal_to_trinary(self):\n",
    "        self.assertEqual(rebase(16, [2, 10], 3), [1, 1, 2, 0])\n",
    "\n",
    "    def test_15_bit_integer(self):\n",
    "        self.assertEqual(rebase(97, [3, 46, 60], 73), [6, 10, 45])\n",
    "\n",
    "    def test_empty_list(self):\n",
    "        self.assertEqual(rebase(2, [], 10), [])\n",
    "\n",
    "    def test_single_zero(self):\n",
    "        self.assertEqual(rebase(10, [0], 2), [])\n",
    "\n",
    "    def test_multiple_zeroes(self):\n",
    "        self.assertEqual(rebase(10, [0, 0, 0], 2), [])\n",
    "\n",
    "    def test_leading_zeros(self):\n",
    "        self.assertEqual(rebase(7, [0, 6, 0], 10), [4, 2])\n",
    "\n",
    "    def test_input_base_is_one(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(1, [0], 10)\n",
    "\n",
    "    def test_input_base_is_zero(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(0, [], 10)\n",
    "\n",
    "    def test_input_base_is_negative(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(-2, [1], 10)\n",
    "\n",
    "    def test_negative_digit(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(2, [1, -1, 1, 0, 1, 0], 10)\n",
    "\n",
    "    def test_invalid_positive_digit(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(2, [1, 2, 1, 0, 1, 0], 10)\n",
    "\n",
    "    def test_output_base_is_one(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(2, [1, 0, 1, 0, 1, 0], 1)\n",
    "\n",
    "    def test_output_base_is_zero(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(10, [7], 0)\n",
    "\n",
    "    def test_output_base_is_negative(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(2, [1], -7)\n",
    "\n",
    "    def test_both_bases_are_negative(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            rebase(-2, [1], -7)\n",
    "\n",
    "    # Utility functions\n",
    "    def setUp(self):\n",
    "        try:\n",
    "            self.assertRaisesRegex\n",
    "        except AttributeError:\n",
    "            self.assertRaisesRegex = self.assertRaisesRegexp\n",
    "\n",
    "    def assertRaisesWithMessage(self, exception):\n",
    "        return self.assertRaisesRegex(exception, r\".+\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
