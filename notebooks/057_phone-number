{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Phone Number\n",
    "\n",
    "Clean up user-entered phone numbers so that they can be sent SMS messages.\n",
    "\n",
    "The **North American Numbering Plan (NANP)** is a telephone numbering system used by many countries in North America like the United States, Canada or Bermuda. All NANP-countries share the same international country code: `1`.\n",
    "\n",
    "NANP numbers are ten-digit numbers consisting of a three-digit Numbering Plan Area code, commonly known as *area code*, followed by a seven-digit local number. The first three digits of the local number represent the *exchange code*, followed by the unique four-digit number which is the *subscriber number*.\n",
    "\n",
    "The format is usually represented as\n",
    "\n",
    "```text\n",
    "(NXX)-NXX-XXXX\n",
    "```\n",
    "\n",
    "where `N` is any digit from 2 through 9 and `X` is any digit from 0 through 9.\n",
    "\n",
    "Your task is to clean up differently formatted telephone numbers by removing punctuation and the country code (1) if present.\n",
    "\n",
    "For example, the inputs\n",
    "- `+1 (613)-995-0253`\n",
    "- `613-995-0253`\n",
    "- `1 613 995 0253`\n",
    "- `613.995.0253`\n",
    "\n",
    "should all produce the output\n",
    "\n",
    "`6139950253`\n",
    "\n",
    "**Note:** As this exercise only deals with telephone numbers used in NANP-countries, only 1 is considered a valid country code.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test phone_number_test.py`\n",
    "- Python 3.3+: `pytest phone_number_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest phone_number_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/phone-number` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Event Manager by JumpstartLab [http://tutorials.jumpstartlab.com/projects/eventmanager.html](http://tutorials.jumpstartlab.com/projects/eventmanager.html)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Phone(object):\n",
    "    def __init__(self, phone_number):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.4.0\n",
    "\n",
    "class PhoneTest(unittest.TestCase):\n",
    "    def test_cleans_number(self):\n",
    "        number = Phone(\"(223) 456-7890\").number\n",
    "        self.assertEqual(number, \"2234567890\")\n",
    "\n",
    "    def test_cleans_number_with_dots(self):\n",
    "        number = Phone(\"223.456.7890\").number\n",
    "        self.assertEqual(number, \"2234567890\")\n",
    "\n",
    "    def test_cleans_number_with_multiple_spaces(self):\n",
    "        number = Phone(\"223 456   7890   \").number\n",
    "        self.assertEqual(number, \"2234567890\")\n",
    "\n",
    "    def test_invalid_when_9_digits(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"123456789\")\n",
    "\n",
    "    def test_invalid_when_11_digits_and_first_not_1(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"22234567890\")\n",
    "\n",
    "    def test_valid_when_11_digits_and_first_is_1(self):\n",
    "        number = Phone(\"12234567890\").number\n",
    "        self.assertEqual(number, \"2234567890\")\n",
    "\n",
    "    def test_valid_when_11_digits_and_first_is_1_with_punctuation(self):\n",
    "        number = Phone(\"+1 (223) 456-7890\").number\n",
    "        self.assertEqual(number, \"2234567890\")\n",
    "\n",
    "    def test_invalid_when_more_than_11_digits(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"321234567890\")\n",
    "\n",
    "    def test_invalid_with_letters(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"123-abc-7890\")\n",
    "\n",
    "    def test_invalid_with_punctuation(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"123-@:!-7890\")\n",
    "\n",
    "    def test_invalid_if_area_code_starts_with_0(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"(023) 456-7890\")\n",
    "\n",
    "    def test_invalid_if_area_code_starts_with_1(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"(123) 456-7890\")\n",
    "\n",
    "    def test_invalid_if_exchange_code_starts_with_0(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"(223) 056-7890\")\n",
    "\n",
    "    def test_invalid_if_exchange_code_starts_with_1(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Phone(\"(223) 156-7890\")\n",
    "\n",
    "    # Track specific tests\n",
    "    def test_area_code(self):\n",
    "        number = Phone(\"2234567890\")\n",
    "        self.assertEqual(number.area_code, \"223\")\n",
    "\n",
    "    def test_pretty_print(self):\n",
    "        number = Phone(\"2234567890\")\n",
    "        self.assertEqual(number.pretty(), \"(223) 456-7890\")\n",
    "\n",
    "    def test_pretty_print_with_full_us_phone_number(self):\n",
    "        number = Phone(\"12234567890\")\n",
    "        self.assertEqual(number.pretty(), \"(223) 456-7890\")\n",
    "\n",
    "    # Utility functions\n",
    "    def setUp(self):\n",
    "        try:\n",
    "            self.assertRaisesRegex\n",
    "        except AttributeError:\n",
    "            self.assertRaisesRegex = self.assertRaisesRegexp\n",
    "\n",
    "    def assertRaisesWithMessage(self, exception):\n",
    "        return self.assertRaisesRegex(exception, r\".+\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
