{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rational Numbers\n",
    "\n",
    "A rational number is defined as the quotient of two integers `a` and `b`, called the numerator and denominator, respectively, where `b != 0`.\n",
    "\n",
    "The absolute value `|r|` of the rational number `r = a/b` is equal to `|a|/|b|`.\n",
    "\n",
    "The sum of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 + r2 = a1/b1 + a2/b2 = (a1 * b2 + a2 * b1) / (b1 * b2)`.\n",
    "\n",
    "The difference of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 - r2 = a1/b1 - a2/b2 = (a1 * b2 - a2 * b1) / (b1 * b2)`.\n",
    "\n",
    "The product (multiplication) of two rational numbers `r1 = a1/b1` and `r2 = a2/b2` is `r1 * r2 = (a1 * a2) / (b1 * b2)`.\n",
    "\n",
    "Dividing a rational number `r1 = a1/b1` by another `r2 = a2/b2` is `r1 / r2 = (a1 * b2) / (a2 * b1)` if `a2 * b1` is not zero.\n",
    "\n",
    "Exponentiation of a rational number `r = a/b` to a non-negative integer power `n` is `r^n = (a^n)/(b^n)`.\n",
    "\n",
    "Exponentiation of a rational number `r = a/b` to a negative integer power `n` is `r^n = (b^m)/(a^m)`, where `m = |n|`.\n",
    "\n",
    "Exponentiation of a rational number `r = a/b` to a real (floating-point) number `x` is the quotient `(a^x)/(b^x)`, which is a real number.\n",
    "\n",
    "Exponentiation of a real number `x` to a rational number `r = a/b` is `x^(a/b) = root(x^a, b)`, where `root(p, q)` is the `q`th root of `p`.\n",
    "\n",
    "Implement the following operations:\n",
    " - addition, subtraction, multiplication and division of two rational numbers,\n",
    " - absolute value, exponentiation of a given rational number to an integer power, exponentiation of a given rational number to a real (floating-point) power, exponentiation of a real number to a rational number.\n",
    "\n",
    "Your implementation of rational numbers should always be reduced to lowest terms. For example, `4/4` should reduce to `1/1`, `30/60` should reduce to `1/2`, `12/8` should reduce to `3/2`, etc. To reduce a rational number `r = a/b`, divide `a` and `b` by the greatest common divisor (gcd) of `a` and `b`. So, for example, `gcd(12, 8) = 4`, so `r = 12/8` can be reduced to `(12/4)/(8/4) = 3/2`.\n",
    "\n",
    "Assume that the programming language you are using does not have an implementation of rational numbers.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test rational_numbers_test.py`\n",
    "- Python 3.3+: `pytest rational_numbers_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest rational_numbers_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/rational-numbers` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Wikipedia [https://en.wikipedia.org/wiki/Rational_number](https://en.wikipedia.org/wiki/Rational_number)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "\n",
    "\n",
    "class Rational(object):\n",
    "    def __init__(self, numer, denom):\n",
    "        self.numer = None\n",
    "        self.denom = None\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        return self.numer == other.numer and self.denom == other.denom\n",
    "\n",
    "    def __repr__(self):\n",
    "        return '{}/{}'.format(self.numer, self.denom)\n",
    "\n",
    "    def __add__(self, other):\n",
    "        pass\n",
    "\n",
    "    def __sub__(self, other):\n",
    "        pass\n",
    "\n",
    "    def __mul__(self, other):\n",
    "        pass\n",
    "\n",
    "    def __truediv__(self, other):\n",
    "        pass\n",
    "\n",
    "    def __abs__(self):\n",
    "        pass\n",
    "\n",
    "    def __pow__(self, power):\n",
    "        pass\n",
    "\n",
    "    def __rpow__(self, base):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "\n",
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.0.0\n",
    "\n",
    "class RationalTests(unittest.TestCase):\n",
    "\n",
    "    # Test addition\n",
    "    def test_add_two_positive(self):\n",
    "        self.assertEqual(Rational(1, 2) + Rational(2, 3), Rational(7, 6))\n",
    "\n",
    "    def test_add_positive_and_negative(self):\n",
    "        self.assertEqual(Rational(1, 2) + Rational(-2, 3), Rational(-1, 6))\n",
    "\n",
    "    def test_add_two_negative(self):\n",
    "        self.assertEqual(Rational(-1, 2) + Rational(-2, 3), Rational(-7, 6))\n",
    "\n",
    "    def test_add_opposite(self):\n",
    "        self.assertEqual(Rational(1, 2) + Rational(-1, 2), Rational(0, 1))\n",
    "\n",
    "    # Test subtraction\n",
    "    def test_subtract_two_positive(self):\n",
    "        self.assertEqual(Rational(1, 2) - Rational(2, 3), Rational(-1, 6))\n",
    "\n",
    "    def test_subtract_positive_and_negative(self):\n",
    "        self.assertEqual(Rational(1, 2) - Rational(-2, 3), Rational(7, 6))\n",
    "\n",
    "    def test_subtract_two_negative(self):\n",
    "        self.assertEqual(Rational(-1, 2) - Rational(-2, 3), Rational(1, 6))\n",
    "\n",
    "    def test_subtract_from_self(self):\n",
    "        self.assertEqual(Rational(1, 2) - Rational(1, 2), Rational(0, 1))\n",
    "\n",
    "    # Test multiplication\n",
    "    def test_multiply_two_positive(self):\n",
    "        self.assertEqual(Rational(1, 2) * Rational(2, 3), Rational(1, 3))\n",
    "\n",
    "    def test_multiply_negative_by_positive(self):\n",
    "        self.assertEqual(Rational(-1, 2) * Rational(2, 3), Rational(-1, 3))\n",
    "\n",
    "    def test_multiply_two_negative(self):\n",
    "        self.assertEqual(Rational(-1, 2) * Rational(-2, 3), Rational(1, 3))\n",
    "\n",
    "    def test_multiply_reciprocal(self):\n",
    "        self.assertEqual(Rational(1, 2) * Rational(2, 1), Rational(1, 1))\n",
    "\n",
    "    def test_multiply_by_one(self):\n",
    "        self.assertEqual(Rational(1, 2) * Rational(1, 1), Rational(1, 2))\n",
    "\n",
    "    def test_multiply_by_zero(self):\n",
    "        self.assertEqual(Rational(1, 2) * Rational(0, 1), Rational(0, 1))\n",
    "\n",
    "    # Test division\n",
    "    def test_divide_two_positive(self):\n",
    "        self.assertEqual(Rational(1, 2) / Rational(2, 3), Rational(3, 4))\n",
    "\n",
    "    def test_divide_positive_by_negative(self):\n",
    "        self.assertEqual(Rational(1, 2) / Rational(-2, 3), Rational(-3, 4))\n",
    "\n",
    "    def test_divide_two_negative(self):\n",
    "        self.assertEqual(Rational(-1, 2) / Rational(-2, 3), Rational(3, 4))\n",
    "\n",
    "    def test_divide_by_one(self):\n",
    "        self.assertEqual(Rational(1, 2) / Rational(1, 1), Rational(1, 2))\n",
    "\n",
    "    # Test absolute value\n",
    "    def test_absolute_value_of_positive(self):\n",
    "        self.assertEqual(abs(Rational(1, 2)), Rational(1, 2))\n",
    "\n",
    "    def test_absolute_value_of_negative(self):\n",
    "        self.assertEqual(abs(Rational(-1, 2)), Rational(1, 2))\n",
    "\n",
    "    def test_absolute_value_of_zero(self):\n",
    "        self.assertEqual(abs(Rational(0, 1)), Rational(0, 1))\n",
    "\n",
    "    # Test exponentiation of a rational number\n",
    "    def test_raise_a_positive_rational_to_a_positive_integer_power(self):\n",
    "        self.assertEqual(Rational(1, 2) ** 3, Rational(1, 8))\n",
    "\n",
    "    def test_raise_a_negative_rational_to_a_positive_integer_power(self):\n",
    "        self.assertEqual(Rational(-1, 2) ** 3, Rational(-1, 8))\n",
    "\n",
    "    def test_raise_zero_to_an_integer_power(self):\n",
    "        self.assertEqual(Rational(0, 1) ** 5, Rational(0, 1))\n",
    "\n",
    "    def test_raise_one_to_an_integer_power(self):\n",
    "        self.assertEqual(Rational(1, 1) ** 4, Rational(1, 1))\n",
    "\n",
    "    def test_raise_a_positive_rational_to_the_power_of_zero(self):\n",
    "        self.assertEqual(Rational(1, 2) ** 0, Rational(1, 1))\n",
    "\n",
    "    def test_raise_a_negative_rational_to_the_power_of_zero(self):\n",
    "        self.assertEqual(Rational(-1, 2) ** 0, Rational(1, 1))\n",
    "\n",
    "    # Test exponentiation of a real number to a rational number\n",
    "    def test_raise_a_real_number_to_a_positive_rational(self):\n",
    "        self.assertAlmostEqual(8 ** Rational(4, 3), 16.0, places=8)\n",
    "\n",
    "    def test_raise_a_real_number_to_a_negative_rational(self):\n",
    "        self.assertAlmostEqual(\n",
    "            9 ** Rational(-1, 2), 0.3333333333333333, places=8\n",
    "        )\n",
    "\n",
    "    def test_raise_a_real_number_to_a_zero_rational(self):\n",
    "        self.assertAlmostEqual(2 ** Rational(0, 1), 1.0, places=8)\n",
    "\n",
    "    # Test reduction to lowest terms\n",
    "    def test_reduce_positive(self):\n",
    "        self.assertEqual(Rational(2, 4), Rational(1, 2))\n",
    "\n",
    "    def test_reduce_negative(self):\n",
    "        self.assertEqual(Rational(-4, 6), Rational(-2, 3))\n",
    "\n",
    "    def test_reduce_rational_with_negative_denominator(self):\n",
    "        self.assertEqual(Rational(3, -9), Rational(-1, 3))\n",
    "\n",
    "    def test_reduce_zero(self):\n",
    "        self.assertEqual(Rational(0, 6), Rational(0, 1))\n",
    "\n",
    "    def test_reduce_integer(self):\n",
    "        self.assertEqual(Rational(-14, 7), Rational(-2, 1))\n",
    "\n",
    "    def test_reduce_one(self):\n",
    "        self.assertEqual(Rational(13, 13), Rational(1, 1))\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
