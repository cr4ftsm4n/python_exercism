{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List Ops\n",
    "\n",
    "Implement basic list operations.\n",
    "\n",
    "In functional languages list operations like `length`, `map`, and\n",
    "`reduce` are very common. Implement a series of basic list operations,\n",
    "without using existing functions.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test list_ops_test.py`\n",
    "- Python 3.3+: `pytest list_ops_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest list_ops_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/list-ops` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def append(xs, ys):\n",
    "    pass\n",
    "\n",
    "\n",
    "def concat(lists):\n",
    "    pass\n",
    "\n",
    "\n",
    "def filter_clone(function, xs):\n",
    "    pass\n",
    "\n",
    "\n",
    "def length(xs):\n",
    "    pass\n",
    "\n",
    "\n",
    "def map_clone(function, xs):\n",
    "    pass\n",
    "\n",
    "\n",
    "def foldl(function, xs, acc):\n",
    "    pass\n",
    "\n",
    "\n",
    "def foldr(function, xs, acc):\n",
    "    pass\n",
    "\n",
    "\n",
    "def reverse(xs):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "import operator\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from problem-specifications//canonical-data.json @ v2.2.0\n",
    "\n",
    "class ListOpsTest(unittest.TestCase):\n",
    "\n",
    "    # test for append\n",
    "    def test_append_empty_lists(self):\n",
    "        self.assertEqual(append([], []), [])\n",
    "\n",
    "    def test_append_empty_list_to_list(self):\n",
    "        self.assertEqual(append([], [1, 2, 3, 4]), [1, 2, 3, 4])\n",
    "\n",
    "    def test_append_nonempty_lists(self):\n",
    "        self.assertEqual(append([1, 2], [2, 3, 4, 5]),\n",
    "                         [1, 2, 2, 3, 4, 5])\n",
    "\n",
    "    # tests for concat\n",
    "    def test_concat_empty_list(self):\n",
    "        self.assertEqual(concat([]), [])\n",
    "\n",
    "    def test_concat_list_of_lists(self):\n",
    "        self.assertEqual(concat([[1, 2], [3], [], [4, 5, 6]]),\n",
    "                         [1, 2, 3, 4, 5, 6])\n",
    "\n",
    "    # tests for filter_clone\n",
    "    def test_filter_empty_list(self):\n",
    "        self.assertEqual(filter_clone(lambda x: x % 2 == 1, []), [])\n",
    "\n",
    "    def test_filter_nonempty_list(self):\n",
    "        self.assertEqual(\n",
    "            filter_clone(lambda x: x % 2 == 1, [1, 2, 3, 4, 5]),\n",
    "            [1, 3, 5])\n",
    "\n",
    "    # tests for length\n",
    "    def test_length_empty_list(self):\n",
    "        self.assertEqual(length([]), 0)\n",
    "\n",
    "    def test_length_nonempty_list(self):\n",
    "        self.assertEqual(length([1, 2, 3, 4]), 4)\n",
    "\n",
    "    # tests for map_clone\n",
    "    def test_map_empty_list(self):\n",
    "        self.assertEqual(map_clone(lambda x: x + 1, []), [])\n",
    "\n",
    "    def test_map_nonempty_list(self):\n",
    "        self.assertEqual(map_clone(lambda x: x + 1, [1, 3, 5, 7]),\n",
    "                         [2, 4, 6, 8])\n",
    "\n",
    "    # tests for foldl\n",
    "    def test_foldl_empty_list(self):\n",
    "        self.assertEqual(foldl(operator.mul, [], 2), 2)\n",
    "\n",
    "    def test_foldl_nonempty_list_addition(self):\n",
    "        self.assertEqual(foldl(operator.add, [1, 2, 3, 4], 5), 15)\n",
    "\n",
    "    def test_foldl_nonempty_list_floordiv(self):\n",
    "        self.assertEqual(foldl(operator.floordiv, [2, 5], 5), 0)\n",
    "\n",
    "    # tests for foldr\n",
    "    def test_foldr_empty_list(self):\n",
    "        self.assertEqual(foldr(operator.mul, [], 2), 2)\n",
    "\n",
    "    def test_foldr_nonempty_list_addition(self):\n",
    "        self.assertEqual(foldr(operator.add, [1, 2, 3, 4], 5), 15)\n",
    "\n",
    "    def test_foldr_nonempty_list_floordiv(self):\n",
    "        self.assertEqual(foldr(operator.floordiv, [2, 5], 5), 2)\n",
    "\n",
    "    # additional test for foldr\n",
    "    def test_foldr_add_str(self):\n",
    "        self.assertEqual(\n",
    "            foldr(operator.add,\n",
    "                           [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"m\"], \"!\"),\n",
    "            \"exercism!\")\n",
    "\n",
    "    # tests for reverse\n",
    "    def test_reverse_empty_list(self):\n",
    "        self.assertEqual(reverse([]), [])\n",
    "\n",
    "    def test_reverse_nonempty_list(self):\n",
    "        self.assertEqual(reverse([1, 3, 5, 7]), [7, 5, 3, 1])\n",
    "\n",
    "    # additional test for reverse\n",
    "    def test_reverse_mixed_types(self):\n",
    "        self.assertEqual(\n",
    "            reverse([\"xyz\", 4.0, \"cat\", 1]), [1, \"cat\", 4.0, \"xyz\"])\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
