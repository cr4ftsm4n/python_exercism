{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bob\n",
    "\n",
    "Bob is a lackadaisical teenager. In conversation, his responses are very limited.\n",
    "\n",
    "Bob answers 'Sure.' if you ask him a question.\n",
    "\n",
    "He answers 'Whoa, chill out!' if you yell at him.\n",
    "\n",
    "He answers 'Calm down, I know what I'm doing!' if you yell a question at him.\n",
    "\n",
    "He says 'Fine. Be that way!' if you address him without actually saying\n",
    "anything.\n",
    "\n",
    "He answers 'Whatever.' to anything else.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test bob_test.py`\n",
    "- Python 3.3+: `pytest bob_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest bob_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/bob` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=06](http://pine.fm/LearnToProgram/?Chapter=06)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hey(phrase):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0\n",
    "\n",
    "class BobTests(unittest.TestCase):\n",
    "    def test_stating_something(self):\n",
    "        self.assertEqual(hey(\"Tom-ay-to, tom-aaaah-to.\"), \"Whatever.\")\n",
    "\n",
    "    def test_shouting(self):\n",
    "        self.assertEqual(hey(\"WATCH OUT!\"), \"Whoa, chill out!\")\n",
    "\n",
    "    def test_shouting_gibberish(self):\n",
    "        self.assertEqual(hey(\"FCECDFCAAB\"), \"Whoa, chill out!\")\n",
    "\n",
    "    def test_asking_a_question(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"Does this cryogenic chamber make me look fat?\"), \"Sure.\")\n",
    "\n",
    "    def test_asking_a_numeric_question(self):\n",
    "        self.assertEqual(hey(\"You are, what, like 15?\"), \"Sure.\")\n",
    "\n",
    "    def test_asking_gibberish(self):\n",
    "        self.assertEqual(hey(\"fffbbcbeab?\"), \"Sure.\")\n",
    "\n",
    "    def test_talking_forcefully(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"Let's go make out behind the gym!\"), \"Whatever.\")\n",
    "\n",
    "    def test_using_acronyms_in_regular_speech(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"It's OK if you don't want to go to the DMV.\"),\n",
    "            \"Whatever.\")\n",
    "\n",
    "    def test_forceful_question(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"WHAT THE HELL WERE YOU THINKING?\"),\n",
    "            \"Calm down, I know what I'm doing!\"\n",
    "        )\n",
    "\n",
    "    def test_shouting_numbers(self):\n",
    "        self.assertEqual(hey(\"1, 2, 3 GO!\"), \"Whoa, chill out!\")\n",
    "\n",
    "    def test_only_numbers(self):\n",
    "        self.assertEqual(hey(\"1, 2, 3\"), \"Whatever.\")\n",
    "\n",
    "    def test_question_with_only_numbers(self):\n",
    "        self.assertEqual(hey(\"4?\"), \"Sure.\")\n",
    "\n",
    "    def test_shouting_with_special_characters(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!\"),\n",
    "            \"Whoa, chill out!\")\n",
    "\n",
    "    def test_shouting_with_no_exclamation_mark(self):\n",
    "        self.assertEqual(hey(\"I HATE YOU\"), \"Whoa, chill out!\")\n",
    "\n",
    "    def test_statement_containing_question_mark(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"Ending with ? means a question.\"), \"Whatever.\")\n",
    "\n",
    "    def test_non_letters_with_question(self):\n",
    "        self.assertEqual(hey(\":) ?\"), \"Sure.\")\n",
    "\n",
    "    def test_prattling_on(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"Wait! Hang on. Are you going to be OK?\"), \"Sure.\")\n",
    "\n",
    "    def test_silence(self):\n",
    "        self.assertEqual(hey(\"\"), \"Fine. Be that way!\")\n",
    "\n",
    "    def test_prolonged_silence(self):\n",
    "        self.assertEqual(hey(\"          \"), \"Fine. Be that way!\")\n",
    "\n",
    "    def test_alternate_silence(self):\n",
    "        self.assertEqual(hey(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\"), \"Fine. Be that way!\")\n",
    "\n",
    "    def test_multiple_line_question(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"\\nDoes this cryogenic chamber make me look fat?\\nno\"),\n",
    "            \"Whatever.\")\n",
    "\n",
    "    def test_starting_with_whitespace(self):\n",
    "        self.assertEqual(hey(\"         hmmmmmmm...\"), \"Whatever.\")\n",
    "\n",
    "    def test_ending_with_whitespace(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"Okay if like my  spacebar  quite a bit?   \"), \"Sure.\")\n",
    "\n",
    "    def test_other_whitespace(self):\n",
    "        self.assertEqual(hey(\"\\n\\r \\t\"), \"Fine. Be that way!\")\n",
    "\n",
    "    def test_non_question_ending_with_whitespace(self):\n",
    "        self.assertEqual(\n",
    "            hey(\"This is a statement ending with whitespace      \"),\n",
    "            \"Whatever.\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
