{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Matrix\n",
    "\n",
    "Given a string representing a matrix of numbers, return the rows and columns of\n",
    "that matrix.\n",
    "\n",
    "So given a string with embedded newlines like:\n",
    "\n",
    "```text\n",
    "9 8 7\n",
    "5 3 2\n",
    "6 6 7\n",
    "```\n",
    "\n",
    "representing this matrix:\n",
    "\n",
    "```text\n",
    "    0  1  2\n",
    "  |---------\n",
    "0 | 9  8  7\n",
    "1 | 5  3  2\n",
    "2 | 6  6  7\n",
    "```\n",
    "\n",
    "your code should be able to spit out:\n",
    "\n",
    "- A list of the rows, reading each row left-to-right while moving\n",
    "  top-to-bottom across the rows,\n",
    "- A list of the columns, reading each column top-to-bottom while moving\n",
    "  from left-to-right.\n",
    "\n",
    "The rows for our example matrix:\n",
    "\n",
    "- 9, 8, 7\n",
    "- 5, 3, 2\n",
    "- 6, 6, 7\n",
    "\n",
    "And its columns:\n",
    "\n",
    "- 9, 5, 6\n",
    "- 8, 3, 6\n",
    "- 7, 2, 7\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test matrix_test.py`\n",
    "- Python 3.3+: `pytest matrix_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest matrix_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/matrix` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Warmup to the `saddle-points` warmup. [http://jumpstartlab.com](http://jumpstartlab.com)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Matrix(object):\n",
    "    def __init__(self, matrix_string):\n",
    "        pass\n",
    "\n",
    "    def row(self, index):\n",
    "        pass\n",
    "\n",
    "    def column(self, index):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.0.0\n",
    "\n",
    "class MatrixTest(unittest.TestCase):\n",
    "    def test_extract_row_from_one_number_matrix(self):\n",
    "        matrix = Matrix(\"1\")\n",
    "        self.assertEqual(matrix.row(0), [1])\n",
    "\n",
    "    def test_can_extract_row(self):\n",
    "        matrix = Matrix(\"1 2\\n3 4\")\n",
    "        self.assertEqual(matrix.row(1), [3, 4])\n",
    "\n",
    "    def test_extract_row_where_numbers_have_different_widths(self):\n",
    "        matrix = Matrix(\"1 2\\n10 20\")\n",
    "        self.assertEqual(matrix.row(1), [10, 20])\n",
    "\n",
    "    def test_can_extract_row_from_non_square_matrix(self):\n",
    "        matrix = Matrix(\"1 2 3\\n4 5 6\\n7 8 9\\n8 7 6\")\n",
    "        self.assertEqual(matrix.row(2), [7, 8, 9])\n",
    "\n",
    "    def test_extract_column_from_one_number_matrix(self):\n",
    "        matrix = Matrix(\"1\")\n",
    "        self.assertEqual(matrix.column(0), [1])\n",
    "\n",
    "    def test_can_extract_column(self):\n",
    "        matrix = Matrix(\"1 2 3\\n4 5 6\\n7 8 9\")\n",
    "        self.assertEqual(matrix.column(2), [3, 6, 9])\n",
    "\n",
    "    def test_can_extract_column_from_non_square_matrix(self):\n",
    "        matrix = Matrix(\"1 2 3\\n4 5 6\\n7 8 9\\n8 7 6\")\n",
    "        self.assertEqual(matrix.column(2), [3, 6, 9, 6])\n",
    "\n",
    "    def test_extract_column_where_numbers_have_different_widths(self):\n",
    "        matrix = Matrix(\"89 1903 3\\n18 3 1\\n9 4 800\")\n",
    "        self.assertEqual(matrix.column(1), [1903, 3, 4])\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
