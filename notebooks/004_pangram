{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pangram\n",
    "\n",
    "Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma,\n",
    "\"every letter\") is a sentence using every letter of the alphabet at least once.\n",
    "The best known English pangram is:\n",
    "> The quick brown fox jumps over the lazy dog.\n",
    "\n",
    "The alphabet used consists of ASCII letters `a` to `z`, inclusive, and is case\n",
    "insensitive. Input will not contain non-ASCII symbols.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test pangram_test.py`\n",
    "- Python 3.3+: `pytest pangram_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest pangram_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/pangram` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Wikipedia [https://en.wikipedia.org/wiki/Pangram](https://en.wikipedia.org/wiki/Pangram)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_pangram(sentence):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.4.0\n",
    "\n",
    "class PangramTests(unittest.TestCase):\n",
    "\n",
    "    def test_sentence_empty(self):\n",
    "        self.assertIs(is_pangram(''), False)\n",
    "\n",
    "    def test_recognizes_a_perfect_lower_case_pangram(self):\n",
    "        self.assertIs(is_pangram('abcdefghijklmnopqrstuvwxyz'), True)\n",
    "\n",
    "    def test_pangram_with_only_lower_case(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('the quick brown fox jumps over the lazy dog'),\n",
    "            True)\n",
    "\n",
    "    def test_missing_character_x(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('a quick movement of the enemy will '\n",
    "                       'jeopardize five gunboats'),\n",
    "            False)\n",
    "\n",
    "    def test_another_missing_character(self):\n",
    "        self.assertIs(is_pangram('five boxing wizards jump quickly at it'),\n",
    "                      False)\n",
    "\n",
    "    def test_pangram_with_underscores(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('the_quick_brown_fox_jumps_over_the_lazy_dog'),\n",
    "            True)\n",
    "\n",
    "    def test_pangram_with_numbers(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('the 1 quick brown fox jumps over the 2 lazy dogs'),\n",
    "            True)\n",
    "\n",
    "    def test_missing_letters_replaced_by_numbers(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog'),\n",
    "            False)\n",
    "\n",
    "    def test_pangram_with_mixedcase_and_punctuation(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('\"Five quacking Zephyrs jolt my wax bed.\"'),\n",
    "            True)\n",
    "\n",
    "    def test_upper_and_lower_case_versions_of_the_same_character(self):\n",
    "        self.assertIs(\n",
    "            is_pangram('the quick brown fox jumped over the lazy FX'),\n",
    "            False)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
