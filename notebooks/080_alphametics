{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alphametics\n",
    "\n",
    "Write a function to solve alphametics puzzles.\n",
    "\n",
    "[Alphametics](https://en.wikipedia.org/wiki/Alphametics) is a puzzle where\n",
    "letters in words are replaced with numbers.\n",
    "\n",
    "For example `SEND + MORE = MONEY`:\n",
    "\n",
    "```text\n",
    "  S E N D\n",
    "  M O R E +\n",
    "-----------\n",
    "M O N E Y\n",
    "```\n",
    "\n",
    "Replacing these with valid numbers gives:\n",
    "\n",
    "```text\n",
    "  9 5 6 7\n",
    "  1 0 8 5 +\n",
    "-----------\n",
    "1 0 6 5 2\n",
    "```\n",
    "\n",
    "This is correct because every letter is replaced by a different number and the\n",
    "words, translated into numbers, then make a valid sum.\n",
    "\n",
    "Each letter must represent a different digit, and the leading digit of\n",
    "a multi-digit number must not be zero.\n",
    "\n",
    "Write a function to solve alphametics puzzles.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test alphametics_test.py`\n",
    "- Python 3.3+: `pytest alphametics_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest alphametics_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/alphametics` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solve(puzzle):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0\n",
    "\n",
    "class TestAlphametics(unittest.TestCase):\n",
    "    def test_puzzle_with_three_letters(self):\n",
    "        self.assertEqual(solve(\"I + BB == ILL\"), {\"I\": 1, \"B\": 9, \"L\": 0})\n",
    "\n",
    "    def test_solution_must_have_unique_value_for_each_letter(self):\n",
    "        self.assertEqual(solve(\"A == B\"), {})\n",
    "\n",
    "    def test_leading_zero_solution_is_invalid(self):\n",
    "        self.assertEqual(solve(\"ACA + DD == BD\"), {})\n",
    "\n",
    "    def test_puzzle_with_four_letters(self):\n",
    "        self.assertEqual(\n",
    "            solve(\"AS + A == MOM\"), {\"A\": 9, \"S\": 2, \"M\": 1, \"O\": 0})\n",
    "\n",
    "    def test_puzzle_with_six_letters(self):\n",
    "        self.assertEqual(\n",
    "            solve(\"NO + NO + TOO == LATE\"),\n",
    "            {\"N\": 7,\n",
    "             \"O\": 4,\n",
    "             \"T\": 9,\n",
    "             \"L\": 1,\n",
    "             \"A\": 0,\n",
    "             \"E\": 2})\n",
    "\n",
    "    def test_puzzle_with_seven_letters(self):\n",
    "        self.assertEqual(\n",
    "            solve(\"HE + SEES + THE == LIGHT\"),\n",
    "            {\"E\": 4,\n",
    "             \"G\": 2,\n",
    "             \"H\": 5,\n",
    "             \"I\": 0,\n",
    "             \"L\": 1,\n",
    "             \"S\": 9,\n",
    "             \"T\": 7})\n",
    "\n",
    "    def test_puzzle_with_eight_letters(self):\n",
    "        self.assertEqual(\n",
    "            solve(\"SEND + MORE == MONEY\"),\n",
    "            {\"S\": 9,\n",
    "             \"E\": 5,\n",
    "             \"N\": 6,\n",
    "             \"D\": 7,\n",
    "             \"M\": 1,\n",
    "             \"O\": 0,\n",
    "             \"R\": 8,\n",
    "             \"Y\": 2})\n",
    "\n",
    "    def test_puzzle_with_ten_letters(self):\n",
    "        self.assertEqual(\n",
    "            solve(\"AND + A + STRONG + OFFENSE + AS + A + GOOD == DEFENSE\"),\n",
    "            {\"A\": 5,\n",
    "             \"D\": 3,\n",
    "             \"E\": 4,\n",
    "             \"F\": 7,\n",
    "             \"G\": 8,\n",
    "             \"N\": 0,\n",
    "             \"O\": 2,\n",
    "             \"R\": 1,\n",
    "             \"S\": 6,\n",
    "             \"T\": 9})\n",
    "\n",
    "    @unittest.skip(\"extra-credit\")\n",
    "    def test_puzzle_with_ten_letters_and_199_addends(self):\n",
    "        self.assertEqual(\n",
    "            solve(\n",
    "                \"THIS + A + FIRE + THEREFORE + FOR + ALL + HISTORIES + I + \"\n",
    "                \"TELL + A + TALE + THAT + FALSIFIES + ITS + TITLE + TIS + \"\n",
    "                \"A + LIE + THE + TALE + OF + THE + LAST + FIRE + HORSES + \"\n",
    "                \"LATE + AFTER + THE + FIRST + FATHERS + FORESEE + THE + \"\n",
    "                \"HORRORS + THE + LAST + FREE + TROLL + TERRIFIES + THE + \"\n",
    "                \"HORSES + OF + FIRE + THE + TROLL + RESTS + AT + THE + \"\n",
    "                \"HOLE + OF + LOSSES + IT + IS + THERE + THAT + SHE + STORES + \"\n",
    "                \"ROLES + OF + LEATHERS + AFTER + SHE + SATISFIES + HER + \"\n",
    "                \"HATE + OFF + THOSE + FEARS + A + TASTE + RISES + AS + SHE + \"\n",
    "                \"HEARS + THE + LEAST + FAR + HORSE + THOSE + FAST + HORSES + \"\n",
    "                \"THAT + FIRST + HEAR + THE + TROLL + FLEE + OFF + TO + THE + \"\n",
    "                \"FOREST + THE + HORSES + THAT + ALERTS + RAISE + THE + STARES \"\n",
    "                \"+ OF + THE + OTHERS + AS + THE + TROLL + ASSAILS + AT + THE \"\n",
    "                \"+ TOTAL + SHIFT + HER + TEETH + TEAR + HOOF + OFF + TORSO + \"\n",
    "                \"AS + THE + LAST + HORSE + FORFEITS + ITS + LIFE + THE + \"\n",
    "                \"FIRST + FATHERS + HEAR + OF + THE + HORRORS + THEIR + FEARS \"\n",
    "                \"+ THAT + THE + FIRES + FOR + THEIR + FEASTS + ARREST + AS + \"\n",
    "                \"THE + FIRST + FATHERS + RESETTLE + THE + LAST + OF + THE + \"\n",
    "                \"FIRE + HORSES + THE + LAST + TROLL + HARASSES + THE + FOREST \"\n",
    "                \"+ HEART + FREE + AT + LAST + OF + THE + LAST + TROLL + ALL + \"\n",
    "                \"OFFER + THEIR + FIRE + HEAT + TO + THE + ASSISTERS + FAR + \"\n",
    "                \"OFF + THE + TROLL + FASTS + ITS + LIFE + SHORTER + AS + \"\n",
    "                \"STARS + RISE + THE + HORSES + REST + SAFE + AFTER + ALL + \"\n",
    "                \"SHARE + HOT + FISH + AS + THEIR + AFFILIATES + TAILOR + A + \"\n",
    "                \"ROOFS + FOR + THEIR + SAFE == FORTRESSES\"\n",
    "            ),\n",
    "            {\"A\": 1,\n",
    "             \"E\": 0,\n",
    "             \"F\": 5,\n",
    "             \"H\": 8,\n",
    "             \"I\": 7,\n",
    "             \"L\": 2,\n",
    "             \"O\": 6,\n",
    "             \"R\": 3,\n",
    "             \"S\": 4,\n",
    "             \"T\": 9})\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
