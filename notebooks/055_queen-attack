{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Queen Attack\n",
    "\n",
    "Given the position of two queens on a chess board, indicate whether or not they\n",
    "are positioned so that they can attack each other.\n",
    "\n",
    "In the game of chess, a queen can attack pieces which are on the same\n",
    "row, column, or diagonal.\n",
    "\n",
    "A chessboard can be represented by an 8 by 8 array.\n",
    "\n",
    "So if you're told the white queen is at (2, 3) and the black queen at\n",
    "(5, 6), then you'd know you've got a set-up like so:\n",
    "\n",
    "```text\n",
    "_ _ _ _ _ _ _ _\n",
    "_ _ _ _ _ _ _ _\n",
    "_ _ _ W _ _ _ _\n",
    "_ _ _ _ _ _ _ _\n",
    "_ _ _ _ _ _ _ _\n",
    "_ _ _ _ _ _ B _\n",
    "_ _ _ _ _ _ _ _\n",
    "_ _ _ _ _ _ _ _\n",
    "```\n",
    "\n",
    "You'd also be able to answer whether the queens can attack each other.\n",
    "In this case, that answer would be yes, they can, because both pieces\n",
    "share a diagonal.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test queen_attack_test.py`\n",
    "- Python 3.3+: `pytest queen_attack_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest queen_attack_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/queen-attack` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "J Dalbey's Programming Practice problems [http://users.csc.calpoly.edu/~jdalbey/103/Projects/ProgrammingPractice.html](http://users.csc.calpoly.edu/~jdalbey/103/Projects/ProgrammingPractice.html)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Queen(object):\n",
    "    def __init__(self, row, column):\n",
    "        pass\n",
    "\n",
    "    def can_attack(self, another_queen):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v2.1.0\n",
    "\n",
    "class QueenAttackTest(unittest.TestCase):\n",
    "\n",
    "    # Test creation of Queens with valid and invalid positions\n",
    "    def test_queen_valid_position(self):\n",
    "        try:\n",
    "            Queen(2, 2)\n",
    "        except ValueError:\n",
    "            self.fail(\"Unexpected Exception\")\n",
    "\n",
    "    def test_queen_negative_row(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Queen(-2, 2)\n",
    "\n",
    "    def test_queen_invalid_row(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Queen(8, 4)\n",
    "\n",
    "    def test_queen_negative_column(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Queen(2, -2)\n",
    "\n",
    "    def test_queen_invalid_column(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Queen(4, 8)\n",
    "\n",
    "    # Test the ability of one queen to attack another\n",
    "    def test_attack_false(self):\n",
    "        self.assertIs(Queen(2, 4).can_attack(Queen(6, 6)), False)\n",
    "\n",
    "    def test_attack_same_row(self):\n",
    "        self.assertIs(Queen(2, 4).can_attack(Queen(2, 6)), True)\n",
    "\n",
    "    def test_attack_same_column(self):\n",
    "        self.assertIs(Queen(4, 5).can_attack(Queen(2, 5)), True)\n",
    "\n",
    "    def test_attack_diagonal1(self):\n",
    "        self.assertIs(Queen(2, 2).can_attack(Queen(0, 4)), True)\n",
    "\n",
    "    def test_attack_diagonal2(self):\n",
    "        self.assertIs(Queen(2, 2).can_attack(Queen(3, 1)), True)\n",
    "\n",
    "    def test_attack_diagonal3(self):\n",
    "        self.assertIs(Queen(2, 2).can_attack(Queen(1, 1)), True)\n",
    "\n",
    "    def test_attack_diagonal4(self):\n",
    "        self.assertIs(Queen(2, 2).can_attack(Queen(5, 5)), True)\n",
    "\n",
    "    # Track-specific tests\n",
    "    def test_queens_same_position_can_attack(self):\n",
    "        with self.assertRaisesWithMessage(ValueError):\n",
    "            Queen(2, 2).can_attack(Queen(2, 2))\n",
    "\n",
    "    # Utility functions\n",
    "    def setUp(self):\n",
    "        try:\n",
    "            self.assertRaisesRegex\n",
    "        except AttributeError:\n",
    "            self.assertRaisesRegex = self.assertRaisesRegexp\n",
    "\n",
    "    def assertRaisesWithMessage(self, exception):\n",
    "        return self.assertRaisesRegex(exception, r\".+\")\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
