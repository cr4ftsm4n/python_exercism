{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clock\n",
    "\n",
    "Implement a clock that handles times without dates.\n",
    "\n",
    "You should be able to add and subtract minutes to it.\n",
    "\n",
    "Two clocks that represent the same time should be equal to each other.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test clock_test.py`\n",
    "- Python 3.3+: `pytest clock_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest clock_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/clock` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Pairing session with Erin Drummond [https://twitter.com/ebdrummond](https://twitter.com/ebdrummond)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Clock(object):\n",
    "    def __init__(self, hour, minute):\n",
    "        pass\n",
    "\n",
    "    def __repr__(self):\n",
    "        pass\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        pass\n",
    "\n",
    "    def __add__(self, minutes):\n",
    "        pass\n",
    "\n",
    "    def __sub__(self, minutes):\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v2.2.1\n",
    "\n",
    "class ClockTest(unittest.TestCase):\n",
    "    # Test creating a new clock with an initial time.\n",
    "    def test_on_the_hour(self):\n",
    "        self.assertEqual(str(Clock(8, 0)), '08:00')\n",
    "\n",
    "    def test_past_the_hour(self):\n",
    "        self.assertEqual(str(Clock(11, 9)), '11:09')\n",
    "\n",
    "    def test_midnight_is_zero_hours(self):\n",
    "        self.assertEqual(str(Clock(24, 0)), '00:00')\n",
    "\n",
    "    def test_hour_rolls_over(self):\n",
    "        self.assertEqual(str(Clock(25, 0)), '01:00')\n",
    "\n",
    "    def test_hour_rolls_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(100, 0)), '04:00')\n",
    "\n",
    "    def test_sixty_minutes_is_next_hour(self):\n",
    "        self.assertEqual(str(Clock(1, 60)), '02:00')\n",
    "\n",
    "    def test_minutes_roll_over(self):\n",
    "        self.assertEqual(str(Clock(0, 160)), '02:40')\n",
    "\n",
    "    def test_minutes_roll_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(0, 1723)), '04:43')\n",
    "\n",
    "    def test_hour_and_minutes_roll_over(self):\n",
    "        self.assertEqual(str(Clock(25, 160)), '03:40')\n",
    "\n",
    "    def test_hour_and_minutes_roll_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(201, 3001)), '11:01')\n",
    "\n",
    "    def test_hour_and_minutes_roll_over_to_exactly_midnight(self):\n",
    "        self.assertEqual(str(Clock(72, 8640)), '00:00')\n",
    "\n",
    "    def test_negative_hour(self):\n",
    "        self.assertEqual(str(Clock(-1, 15)), '23:15')\n",
    "\n",
    "    def test_negative_hour_rolls_over(self):\n",
    "        self.assertEqual(str(Clock(-25, 0)), '23:00')\n",
    "\n",
    "    def test_negative_hour_rolls_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(-91, 0)), '05:00')\n",
    "\n",
    "    def test_negative_minutes(self):\n",
    "        self.assertEqual(str(Clock(1, -40)), '00:20')\n",
    "\n",
    "    def test_negative_minutes_roll_over(self):\n",
    "        self.assertEqual(str(Clock(1, -160)), '22:20')\n",
    "\n",
    "    def test_negative_minutes_roll_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(1, -4820)), '16:40')\n",
    "\n",
    "    def test_negative_hour_and_minutes_both_roll_over(self):\n",
    "        self.assertEqual(str(Clock(-25, -160)), '20:20')\n",
    "\n",
    "    def test_negative_hour_and_minutes_both_roll_over_continuously(self):\n",
    "        self.assertEqual(str(Clock(-121, -5810)), '22:10')\n",
    "\n",
    "    # Test adding and subtracting minutes.\n",
    "    def test_add_minutes(self):\n",
    "        self.assertEqual(str(Clock(10, 0) + 3), '10:03')\n",
    "\n",
    "    def test_add_no_minutes(self):\n",
    "        self.assertEqual(str(Clock(6, 41) + 0), '06:41')\n",
    "\n",
    "    def test_add_to_next_hour(self):\n",
    "        self.assertEqual(str(Clock(0, 45) + 40), '01:25')\n",
    "\n",
    "    def test_add_more_than_one_hour(self):\n",
    "        self.assertEqual(str(Clock(10, 0) + 61), '11:01')\n",
    "\n",
    "    def test_add_more_than_two_hours_with_carry(self):\n",
    "        self.assertEqual(str(Clock(0, 45) + 160), '03:25')\n",
    "\n",
    "    def test_add_across_midnight(self):\n",
    "        self.assertEqual(str(Clock(23, 59) + 2), '00:01')\n",
    "\n",
    "    def test_add_more_than_one_day(self):\n",
    "        self.assertEqual(str(Clock(5, 32) + 1500), '06:32')\n",
    "\n",
    "    def test_add_more_than_two_days(self):\n",
    "        self.assertEqual(str(Clock(1, 1) + 3500), '11:21')\n",
    "\n",
    "    def test_subtract_minutes(self):\n",
    "        self.assertEqual(str(Clock(10, 3) - 3), '10:00')\n",
    "\n",
    "    def test_subtract_to_previous_hour(self):\n",
    "        self.assertEqual(str(Clock(10, 3) - 30), '09:33')\n",
    "\n",
    "    def test_subtract_more_than_an_hour(self):\n",
    "        self.assertEqual(str(Clock(10, 3) - 70), '08:53')\n",
    "\n",
    "    def test_subtract_across_midnight(self):\n",
    "        self.assertEqual(str(Clock(0, 3) - 4), '23:59')\n",
    "\n",
    "    def test_subtract_more_than_two_hours(self):\n",
    "        self.assertEqual(str(Clock(0, 0) - 160), '21:20')\n",
    "\n",
    "    def test_subtract_more_than_two_hours_with_borrow(self):\n",
    "        self.assertEqual(str(Clock(6, 15) - 160), '03:35')\n",
    "\n",
    "    def test_subtract_more_than_one_day(self):\n",
    "        self.assertEqual(str(Clock(5, 32) - 1500), '04:32')\n",
    "\n",
    "    def test_subtract_more_than_two_days(self):\n",
    "        self.assertEqual(str(Clock(2, 20) - 3000), '00:20')\n",
    "\n",
    "    # Construct two separate clocks, set times, test if they are equal.\n",
    "    def test_clocks_with_same_time(self):\n",
    "        self.assertEqual(Clock(15, 37), Clock(15, 37))\n",
    "\n",
    "    def test_clocks_a_minute_apart(self):\n",
    "        self.assertNotEqual(Clock(15, 36), Clock(15, 37))\n",
    "\n",
    "    def test_clocks_an_hour_apart(self):\n",
    "        self.assertNotEqual(Clock(14, 37), Clock(15, 37))\n",
    "\n",
    "    def test_clocks_with_hour_overflow(self):\n",
    "        self.assertEqual(Clock(10, 37), Clock(34, 37))\n",
    "\n",
    "    def test_clocks_with_hour_overflow_by_several_days(self):\n",
    "        self.assertEqual(Clock(3, 11), Clock(99, 11))\n",
    "\n",
    "    def test_clocks_with_negative_hour(self):\n",
    "        self.assertEqual(Clock(22, 40), Clock(-2, 40))\n",
    "\n",
    "    def test_clocks_with_negative_hour_that_wraps(self):\n",
    "        self.assertEqual(Clock(17, 3), Clock(-31, 3))\n",
    "\n",
    "    def test_clocks_with_negative_hour_that_wraps_multiple_times(self):\n",
    "        self.assertEqual(Clock(13, 49), Clock(-83, 49))\n",
    "\n",
    "    def test_clocks_with_minute_overflow(self):\n",
    "        self.assertEqual(Clock(0, 1), Clock(0, 1441))\n",
    "\n",
    "    def test_clocks_with_minute_overflow_by_several_days(self):\n",
    "        self.assertEqual(Clock(2, 2), Clock(2, 4322))\n",
    "\n",
    "    def test_clocks_with_negative_minute(self):\n",
    "        self.assertEqual(Clock(2, 40), Clock(3, -20))\n",
    "\n",
    "    def test_clocks_with_negative_minute_that_wraps(self):\n",
    "        self.assertEqual(Clock(4, 10), Clock(5, -1490))\n",
    "\n",
    "    def test_clocks_with_negative_minute_that_wraps_multiple_times(self):\n",
    "        self.assertEqual(Clock(6, 15), Clock(6, -4305))\n",
    "\n",
    "    def test_clocks_with_negative_hours_and_minutes(self):\n",
    "        self.assertEqual(Clock(7, 32), Clock(-12, -268))\n",
    "\n",
    "    def test_clocks_with_negative_hours_and_minutes_that_wrap(self):\n",
    "        self.assertEqual(Clock(18, 7), Clock(-54, -11513))\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
