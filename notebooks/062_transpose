{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Transpose\n",
    "\n",
    "Given an input text output it transposed.\n",
    "\n",
    "Roughly explained, the transpose of a matrix:\n",
    "\n",
    "```text\n",
    "ABC\n",
    "DEF\n",
    "```\n",
    "\n",
    "is given by:\n",
    "\n",
    "```text\n",
    "AD\n",
    "BE\n",
    "CF\n",
    "```\n",
    "\n",
    "Rows become columns and columns become rows. See <https://en.wikipedia.org/wiki/Transpose>.\n",
    "\n",
    "If the input has rows of different lengths, this is to be solved as follows:\n",
    "\n",
    "- Pad to the left with spaces.\n",
    "- Don't pad to the right.\n",
    "\n",
    "Therefore, transposing this matrix:\n",
    "\n",
    "```text\n",
    "ABC\n",
    "DE\n",
    "```\n",
    "\n",
    "results in:\n",
    "\n",
    "```text\n",
    "AD\n",
    "BE\n",
    "C\n",
    "```\n",
    "\n",
    "And transposing:\n",
    "\n",
    "```text\n",
    "AB\n",
    "DEF\n",
    "```\n",
    "\n",
    "results in:\n",
    "\n",
    "```text\n",
    "AD\n",
    "BE\n",
    " F\n",
    "```\n",
    "\n",
    "In general, all characters from the input should also be present in the transposed output.\n",
    "That means that if a column in the input text contains only spaces on its bottom-most row(s),\n",
    "the corresponding output row should contain the spaces in its right-most column(s).\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test transpose_test.py`\n",
    "- Python 3.3+: `pytest transpose_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest transpose_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/transpose` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "Reddit r/dailyprogrammer challenge #270 [Easy]. [https://www.reddit.com/r/dailyprogrammer/comments/4msu2x/challenge_270_easy_transpose_the_input_text](https://www.reddit.com/r/dailyprogrammer/comments/4msu2x/challenge_270_easy_transpose_the_input_text)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transpose(input_lines):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0\n",
    "\n",
    "class TransposeTests(unittest.TestCase):\n",
    "    def test_empty_string(self):\n",
    "        input_line = \"\"\n",
    "        expected = \"\"\n",
    "        self.assertEqual(\n",
    "            transpose(input_line),\n",
    "            expected\n",
    "        )\n",
    "\n",
    "    def test_two_characters_in_a_row(self):\n",
    "        input_line = \"A1\"\n",
    "        expected = [\n",
    "            \"A\",\n",
    "            \"1\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(input_line),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_two_characters_in_a_column(self):\n",
    "        input_line = [\n",
    "            \"A\",\n",
    "            \"1\"\n",
    "        ]\n",
    "        expected = \"A1\"\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            expected\n",
    "        )\n",
    "\n",
    "    def test_simple(self):\n",
    "        input_line = [\n",
    "            \"ABC\",\n",
    "            \"123\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"A1\",\n",
    "            \"B2\",\n",
    "            \"C3\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_single_line(self):\n",
    "        input_line = [\"Single line.\"]\n",
    "        expected = [\n",
    "            \"S\",\n",
    "            \"i\",\n",
    "            \"n\",\n",
    "            \"g\",\n",
    "            \"l\",\n",
    "            \"e\",\n",
    "            \" \",\n",
    "            \"l\",\n",
    "            \"i\",\n",
    "            \"n\",\n",
    "            \"e\",\n",
    "            \".\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_first_line_longer_than_second_line(self):\n",
    "        input_line = [\n",
    "            \"The fourth line.\",\n",
    "            \"The fifth line.\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"TT\",\n",
    "            \"hh\",\n",
    "            \"ee\",\n",
    "            \"  \",\n",
    "            \"ff\",\n",
    "            \"oi\",\n",
    "            \"uf\",\n",
    "            \"rt\",\n",
    "            \"th\",\n",
    "            \"h \",\n",
    "            \" l\",\n",
    "            \"li\",\n",
    "            \"in\",\n",
    "            \"ne\",\n",
    "            \"e.\",\n",
    "            \".\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_second_line_longer_than_first_line(self):\n",
    "        input_line = [\n",
    "            \"The first line.\",\n",
    "            \"The second line.\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"TT\",\n",
    "            \"hh\",\n",
    "            \"ee\",\n",
    "            \"  \",\n",
    "            \"fs\",\n",
    "            \"ie\",\n",
    "            \"rc\",\n",
    "            \"so\",\n",
    "            \"tn\",\n",
    "            \" d\",\n",
    "            \"l \",\n",
    "            \"il\",\n",
    "            \"ni\",\n",
    "            \"en\",\n",
    "            \".e\",\n",
    "            \" .\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_square(self):\n",
    "        input_line = [\n",
    "            \"HEART\",\n",
    "            \"EMBER\",\n",
    "            \"ABUSE\",\n",
    "            \"RESIN\",\n",
    "            \"TREND\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"HEART\",\n",
    "            \"EMBER\",\n",
    "            \"ABUSE\",\n",
    "            \"RESIN\",\n",
    "            \"TREND\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_rectangle(self):\n",
    "        input_line = [\n",
    "            \"FRACTURE\",\n",
    "            \"OUTLINED\",\n",
    "            \"BLOOMING\",\n",
    "            \"SEPTETTE\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"FOBS\",\n",
    "            \"RULE\",\n",
    "            \"ATOP\",\n",
    "            \"CLOT\",\n",
    "            \"TIME\",\n",
    "            \"UNIT\",\n",
    "            \"RENT\",\n",
    "            \"EDGE\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_triangle(self):\n",
    "        input_line = [\n",
    "            \"T\",\n",
    "            \"EE\",\n",
    "            \"AAA\",\n",
    "            \"SSSS\",\n",
    "            \"EEEEE\",\n",
    "            \"RRRRRR\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"TEASER\",\n",
    "            \" EASER\",\n",
    "            \"  ASER\",\n",
    "            \"   SER\",\n",
    "            \"    ER\",\n",
    "            \"     R\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "    def test_mixed_line_length(self):\n",
    "        input_line = [\n",
    "            \"The longest line.\",\n",
    "            \"A long line.\",\n",
    "            \"A longer line.\",\n",
    "            \"A line.\"\n",
    "        ]\n",
    "        expected = [\n",
    "            \"TAAA\",\n",
    "            \"h   \",\n",
    "            \"elll\",\n",
    "            \" ooi\",\n",
    "            \"lnnn\",\n",
    "            \"ogge\",\n",
    "            \"n e.\",\n",
    "            \"glr\",\n",
    "            \"ei \",\n",
    "            \"snl\",\n",
    "            \"tei\",\n",
    "            \" .n\",\n",
    "            \"l e\",\n",
    "            \"i .\",\n",
    "            \"n\",\n",
    "            \"e\",\n",
    "            \".\"\n",
    "        ]\n",
    "        self.assertEqual(\n",
    "            transpose(\"\\n\".join(input_line)),\n",
    "            \"\\n\".join(expected)\n",
    "        )\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
