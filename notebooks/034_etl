{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ETL\n",
    "\n",
    "We are going to do the `Transform` step of an Extract-Transform-Load.\n",
    "\n",
    "### ETL\n",
    "\n",
    "Extract-Transform-Load (ETL) is a fancy way of saying, \"We have some crufty, legacy data over in this system, and now we need it in this shiny new system over here, so\n",
    "we're going to migrate this.\"\n",
    "\n",
    "(Typically, this is followed by, \"We're only going to need to run this\n",
    "once.\" That's then typically followed by much forehead slapping and\n",
    "moaning about how stupid we could possibly be.)\n",
    "\n",
    "### The goal\n",
    "\n",
    "We're going to extract some scrabble scores from a legacy system.\n",
    "\n",
    "The old system stored a list of letters per score:\n",
    "\n",
    "- 1 point: \"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\",\n",
    "- 2 points: \"D\", \"G\",\n",
    "- 3 points: \"B\", \"C\", \"M\", \"P\",\n",
    "- 4 points: \"F\", \"H\", \"V\", \"W\", \"Y\",\n",
    "- 5 points: \"K\",\n",
    "- 8 points: \"J\", \"X\",\n",
    "- 10 points: \"Q\", \"Z\",\n",
    "\n",
    "The shiny new scrabble system instead stores the score per letter, which\n",
    "makes it much faster and easier to calculate the score for a word. It\n",
    "also stores the letters in lower-case regardless of the case of the\n",
    "input letters:\n",
    "\n",
    "- \"a\" is worth 1 point.\n",
    "- \"b\" is worth 3 points.\n",
    "- \"c\" is worth 3 points.\n",
    "- \"d\" is worth 2 points.\n",
    "- Etc.\n",
    "\n",
    "Your mission, should you choose to accept it, is to transform the legacy data\n",
    "format to the shiny new format.\n",
    "\n",
    "### Notes\n",
    "\n",
    "A final note about scoring, Scrabble is played around the world in a\n",
    "variety of languages, each with its own unique scoring table. For\n",
    "example, an \"E\" is scored at 2 in the MƒÅori-language version of the\n",
    "game while being scored at 4 in the Hawaiian-language version.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test etl_test.py`\n",
    "- Python 3.3+: `pytest etl_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest etl_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/etl` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Source\n",
    "\n",
    "The Jumpstart Lab team [http://jumpstartlab.com](http://jumpstartlab.com)\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transform(legacy_data):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.0.0\n",
    "\n",
    "class TransformTest(unittest.TestCase):\n",
    "    def test_a_single_letter(self):\n",
    "        self.assertEqual(transform({1: ['A']}), {'a': 1})\n",
    "\n",
    "    def test_single_score_with_multiple_letters(self):\n",
    "        legacy_data = {1: [\"A\", \"E\", \"I\", \"O\", \"U\"]}\n",
    "        data = {\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n",
    "        self.assertEqual(transform(legacy_data), data)\n",
    "\n",
    "    def test_multiple_scores_with_multiple_letters(self):\n",
    "        legacy_data = {1: [\"A\", \"E\"], 2: [\"D\", \"G\"]}\n",
    "        data = {\"a\": 1, \"d\": 2, \"e\": 1, \"g\": 2}\n",
    "        self.assertEqual(transform(legacy_data), data)\n",
    "\n",
    "    def test_multiple_scores_with_differing_numbers_of_letters(self):\n",
    "        legacy_data = {\n",
    "            1: [\"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\"],\n",
    "            2: [\"D\", \"G\"],\n",
    "            3: [\"B\", \"C\", \"M\", \"P\"],\n",
    "            4: [\"F\", \"H\", \"V\", \"W\", \"Y\"],\n",
    "            5: [\"K\"],\n",
    "            8: [\"J\", \"X\"],\n",
    "            10: [\"Q\", \"Z\"]\n",
    "        }\n",
    "        data = {\n",
    "            \"a\": 1, \"b\": 3, \"c\": 3, \"d\": 2, \"e\": 1, \"f\": 4,\n",
    "            \"g\": 2, \"h\": 4, \"i\": 1, \"j\": 8, \"k\": 5, \"l\": 1,\n",
    "            \"m\": 3, \"n\": 1, \"o\": 1, \"p\": 3, \"q\": 10, \"r\": 1,\n",
    "            \"s\": 1, \"t\": 1, \"u\": 1, \"v\": 4, \"w\": 4, \"x\": 8,\n",
    "            \"y\": 4, \"z\": 10\n",
    "        }\n",
    "        self.assertEqual(transform(legacy_data), data)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
