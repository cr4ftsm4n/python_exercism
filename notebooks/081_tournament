{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tournament\n",
    "\n",
    "Tally the results of a small football competition.\n",
    "\n",
    "Based on an input file containing which team played against which and what the\n",
    "outcome was, create a file with a table like this:\n",
    "\n",
    "```text\n",
    "Team                           | MP |  W |  D |  L |  P\n",
    "Devastating Donkeys            |  3 |  2 |  1 |  0 |  7\n",
    "Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6\n",
    "Blithering Badgers             |  3 |  1 |  0 |  2 |  3\n",
    "Courageous Californians        |  3 |  0 |  1 |  2 |  1\n",
    "```\n",
    "\n",
    "What do those abbreviations mean?\n",
    "\n",
    "- MP: Matches Played\n",
    "- W: Matches Won\n",
    "- D: Matches Drawn (Tied)\n",
    "- L: Matches Lost\n",
    "- P: Points\n",
    "\n",
    "A win earns a team 3 points. A draw earns 1. A loss earns 0.\n",
    "\n",
    "The outcome should be ordered by points, descending. In case of a tie, teams are ordered alphabetically.\n",
    "\n",
    "###\n",
    "\n",
    "Input\n",
    "\n",
    "Your tallying program will receive input that looks like:\n",
    "\n",
    "```text\n",
    "Allegoric Alaskans;Blithering Badgers;win\n",
    "Devastating Donkeys;Courageous Californians;draw\n",
    "Devastating Donkeys;Allegoric Alaskans;win\n",
    "Courageous Californians;Blithering Badgers;loss\n",
    "Blithering Badgers;Devastating Donkeys;loss\n",
    "Allegoric Alaskans;Courageous Californians;win\n",
    "```\n",
    "\n",
    "The result of the match refers to the first team listed. So this line\n",
    "\n",
    "```text\n",
    "Allegoric Alaskans;Blithering Badgers;win\n",
    "```\n",
    "\n",
    "Means that the Allegoric Alaskans beat the Blithering Badgers.\n",
    "\n",
    "This line:\n",
    "\n",
    "```text\n",
    "Courageous Californians;Blithering Badgers;loss\n",
    "```\n",
    "\n",
    "Means that the Blithering Badgers beat the Courageous Californians.\n",
    "\n",
    "And this line:\n",
    "\n",
    "```text\n",
    "Devastating Donkeys;Courageous Californians;draw\n",
    "```\n",
    "\n",
    "Means that the Devastating Donkeys and Courageous Californians tied.\n",
    "\n",
    "## Exception messages\n",
    "\n",
    "Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to\n",
    "indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not\n",
    "every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include\n",
    "a message.\n",
    "\n",
    "To raise a message with an exception, just write it as an argument to the exception type. For example, instead of\n",
    "`raise Exception`, you should write:\n",
    "\n",
    "```python\n",
    "raise Exception(\"Meaningful message indicating the source of the error\")\n",
    "```\n",
    "\n",
    "## Running the tests\n",
    "\n",
    "To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):\n",
    "\n",
    "- Python 2.7: `py.test tournament_test.py`\n",
    "- Python 3.3+: `pytest tournament_test.py`\n",
    "\n",
    "Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):\n",
    "`python -m pytest tournament_test.py`\n",
    "\n",
    "### Common `pytest` options\n",
    "\n",
    "- `-v` : enable verbose output\n",
    "- `-x` : stop running tests on first failure\n",
    "- `--ff` : run failures from previous test before running other test cases\n",
    "\n",
    "For other options, see `python -m pytest -h`\n",
    "\n",
    "## Submitting Exercises\n",
    "\n",
    "Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/tournament` directory.\n",
    "\n",
    "You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.\n",
    "\n",
    "For more detailed information about running tests, code style and linting,\n",
    "please see the [help page](http://exercism.io/languages/python).\n",
    "\n",
    "## Submitting Incomplete Solutions\n",
    "\n",
    "It's possible to submit an incomplete solution so you can see how others have completed the exercise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tally(tournament_results):\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "\n",
    "\n",
    "# Tests adapted from `problem-specifications//canonical-data.json` @ v1.4.0\n",
    "\n",
    "class TestTournament(unittest.TestCase):\n",
    "    def test_just_the_header_if_no_input(self):\n",
    "        self.assertEqual(\n",
    "            tally(''),\n",
    "            'Team                           | MP |  W |  D |  L |  P'\n",
    "        )\n",
    "\n",
    "    def test_a_win_is_three_points_and_a_loss_is_zero_points(self):\n",
    "        results = 'Allegoric Alaskans;Blithering Badgers;win'\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3\\n'\n",
    "                 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_a_win_can_also_be_expressed_as_a_loss(self):\n",
    "        results = 'Blithering Badgers;Allegoric Alaskans;loss'\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3\\n'\n",
    "                 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_a_different_team_can_win(self):\n",
    "        results = 'Blithering Badgers;Allegoric Alaskans;win'\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Blithering Badgers             |  1 |  1 |  0 |  0 |  3\\n'\n",
    "                 'Allegoric Alaskans             |  1 |  0 |  0 |  1 |  0')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_a_draw_is_one_point_each(self):\n",
    "        results = 'Allegoric Alaskans;Blithering Badgers;draw'\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  1 |  0 |  1 |  0 |  1\\n'\n",
    "                 'Blithering Badgers             |  1 |  0 |  1 |  0 |  1')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_there_can_be_more_than_one_match(self):\n",
    "        results = ('Allegoric Alaskans;Blithering Badgers;win\\n'\n",
    "                   'Allegoric Alaskans;Blithering Badgers;win')\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6\\n'\n",
    "                 'Blithering Badgers             |  2 |  0 |  0 |  2 |  0')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_there_can_be_more_than_one_winner(self):\n",
    "        results = ('Allegoric Alaskans;Blithering Badgers;loss\\n'\n",
    "                   'Allegoric Alaskans;Blithering Badgers;win')\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  2 |  1 |  0 |  1 |  3\\n'\n",
    "                 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_there_can_be_more_than_two_teams(self):\n",
    "        results = ('Allegoric Alaskans;Blithering Badgers;win\\n'\n",
    "                   'Blithering Badgers;Courageous Californians;win\\n'\n",
    "                   'Courageous Californians;Allegoric Alaskans;loss')\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6\\n'\n",
    "                 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3\\n'\n",
    "                 'Courageous Californians        |  2 |  0 |  0 |  2 |  0')\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_typical_input(self):\n",
    "        results = ('Allegoric Alaskans;Blithering Badgers;win\\n'\n",
    "                   'Devastating Donkeys;Courageous Californians;draw\\n'\n",
    "                   'Devastating Donkeys;Allegoric Alaskans;win\\n'\n",
    "                   'Courageous Californians;Blithering Badgers;loss\\n'\n",
    "                   'Blithering Badgers;Devastating Donkeys;loss\\n'\n",
    "                   'Allegoric Alaskans;Courageous Californians;win')\n",
    "\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Devastating Donkeys            |  3 |  2 |  1 |  0 |  7\\n'\n",
    "                 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6\\n'\n",
    "                 'Blithering Badgers             |  3 |  1 |  0 |  2 |  3\\n'\n",
    "                 'Courageous Californians        |  3 |  0 |  1 |  2 |  1')\n",
    "\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_incomplete_competitionnot_not_all_pairs_have_played(self):\n",
    "        results = ('Allegoric Alaskans;Blithering Badgers;loss\\n'\n",
    "                   'Devastating Donkeys;Allegoric Alaskans;loss\\n'\n",
    "                   'Courageous Californians;Blithering Badgers;draw\\n'\n",
    "                   'Allegoric Alaskans;Courageous Californians;win')\n",
    "\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6\\n'\n",
    "                 'Blithering Badgers             |  2 |  1 |  1 |  0 |  4\\n'\n",
    "                 'Courageous Californians        |  2 |  0 |  1 |  1 |  1\\n'\n",
    "                 'Devastating Donkeys            |  1 |  0 |  0 |  1 |  0')\n",
    "\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "    def test_ties_broken_alphabetically(self):\n",
    "        results = ('Courageous Californians;Devastating Donkeys;win\\n'\n",
    "                   'Allegoric Alaskans;Blithering Badgers;win\\n'\n",
    "                   'Devastating Donkeys;Allegoric Alaskans;loss\\n'\n",
    "                   'Courageous Californians;Blithering Badgers;win\\n'\n",
    "                   'Blithering Badgers;Devastating Donkeys;draw\\n'\n",
    "                   'Allegoric Alaskans;Courageous Californians;draw')\n",
    "\n",
    "        table = ('Team                           | MP |  W |  D |  L |  P\\n'\n",
    "                 'Allegoric Alaskans             |  3 |  2 |  1 |  0 |  7\\n'\n",
    "                 'Courageous Californians        |  3 |  2 |  1 |  0 |  7\\n'\n",
    "                 'Blithering Badgers             |  3 |  0 |  1 |  2 |  1\\n'\n",
    "                 'Devastating Donkeys            |  3 |  0 |  1 |  2 |  1')\n",
    "\n",
    "        self.assertEqual(tally(results), table)\n",
    "\n",
    "\n",
    "unittest.main(argv=[''], exit=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
